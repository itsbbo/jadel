// Code generated by BobGen psql v0.0.0-20250612114253-14d7148b83cb. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"fmt"
	"io"
	"time"

	"github.com/aarondl/opt/omit"
	"github.com/oklog/ulid/v2"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
	"github.com/stephenafamo/bob/types/pgtypes"
)

// User is an object representing the database table.
type User struct {
	ID        ulid.ULID `db:"id,pk" json:"id"`
	Name      string    `db:"name" json:"name"`
	Email     string    `db:"email" json:"email"`
	Password  string    `db:"password" json:"-"`
	CreatedAt time.Time `db:"created_at" json:"created_at"`
	UpdatedAt time.Time `db:"updated_at" json:"updated_at"`

	R userR `db:"-" json:"-"`
}

// UserSlice is an alias for a slice of pointers to User.
// This should almost always be used instead of []*User.
type UserSlice []*User

// Users contains methods to work with the users table
var Users = psql.NewTablex[*User, UserSlice, *UserSetter]("", "users")

// UsersQuery is a query on the users table
type UsersQuery = *psql.ViewQuery[*User, UserSlice]

// userR is where relationships are stored.
type userR struct {
	PrivateKeys PrivateKeySlice `json:"PrivateKeys"` // private_keys.private_keys_user_id_fkey
	Projects    ProjectSlice    `json:"Projects"`    // projects.projects_user_id_fkey
	Servers     ServerSlice     `json:"Servers"`     // servers.servers_user_id_fkey
	Sessions    SessionSlice    `json:"Sessions"`    // sessions.sessions_user_id_fkey
}

type userColumnNames struct {
	ID        string
	Name      string
	Email     string
	Password  string
	CreatedAt string
	UpdatedAt string
}

var UserColumns = buildUserColumns("users")

type userColumns struct {
	tableAlias string
	ID         psql.Expression
	Name       psql.Expression
	Email      psql.Expression
	Password   psql.Expression
	CreatedAt  psql.Expression
	UpdatedAt  psql.Expression
}

func (c userColumns) Alias() string {
	return c.tableAlias
}

func (userColumns) AliasedAs(alias string) userColumns {
	return buildUserColumns(alias)
}

func buildUserColumns(alias string) userColumns {
	return userColumns{
		tableAlias: alias,
		ID:         psql.Quote(alias, "id"),
		Name:       psql.Quote(alias, "name"),
		Email:      psql.Quote(alias, "email"),
		Password:   psql.Quote(alias, "password"),
		CreatedAt:  psql.Quote(alias, "created_at"),
		UpdatedAt:  psql.Quote(alias, "updated_at"),
	}
}

type userWhere[Q psql.Filterable] struct {
	ID        psql.WhereMod[Q, ulid.ULID]
	Name      psql.WhereMod[Q, string]
	Email     psql.WhereMod[Q, string]
	Password  psql.WhereMod[Q, string]
	CreatedAt psql.WhereMod[Q, time.Time]
	UpdatedAt psql.WhereMod[Q, time.Time]
}

func (userWhere[Q]) AliasedAs(alias string) userWhere[Q] {
	return buildUserWhere[Q](buildUserColumns(alias))
}

func buildUserWhere[Q psql.Filterable](cols userColumns) userWhere[Q] {
	return userWhere[Q]{
		ID:        psql.Where[Q, ulid.ULID](cols.ID),
		Name:      psql.Where[Q, string](cols.Name),
		Email:     psql.Where[Q, string](cols.Email),
		Password:  psql.Where[Q, string](cols.Password),
		CreatedAt: psql.Where[Q, time.Time](cols.CreatedAt),
		UpdatedAt: psql.Where[Q, time.Time](cols.UpdatedAt),
	}
}

var UserErrors = &userErrors{
	ErrUniqueUsersPkey: &UniqueConstraintError{
		schema:  "",
		table:   "users",
		columns: []string{"id"},
		s:       "users_pkey",
	},

	ErrUniqueUsersEmailKey: &UniqueConstraintError{
		schema:  "",
		table:   "users",
		columns: []string{"email"},
		s:       "users_email_key",
	},
}

type userErrors struct {
	ErrUniqueUsersPkey *UniqueConstraintError

	ErrUniqueUsersEmailKey *UniqueConstraintError
}

// UserSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type UserSetter struct {
	ID        omit.Val[ulid.ULID] `db:"id,pk" json:"id"`
	Name      omit.Val[string]    `db:"name" json:"name"`
	Email     omit.Val[string]    `db:"email" json:"email"`
	Password  omit.Val[string]    `db:"password" json:"-"`
	CreatedAt omit.Val[time.Time] `db:"created_at" json:"created_at"`
	UpdatedAt omit.Val[time.Time] `db:"updated_at" json:"updated_at"`
}

func (s UserSetter) SetColumns() []string {
	vals := make([]string, 0, 6)
	if s.ID.IsSet() {
		vals = append(vals, "id")
	}
	if s.Name.IsSet() {
		vals = append(vals, "name")
	}
	if s.Email.IsSet() {
		vals = append(vals, "email")
	}
	if s.Password.IsSet() {
		vals = append(vals, "password")
	}
	if s.CreatedAt.IsSet() {
		vals = append(vals, "created_at")
	}
	if s.UpdatedAt.IsSet() {
		vals = append(vals, "updated_at")
	}
	return vals
}

func (s UserSetter) Overwrite(t *User) {
	if s.ID.IsSet() {
		t.ID = s.ID.MustGet()
	}
	if s.Name.IsSet() {
		t.Name = s.Name.MustGet()
	}
	if s.Email.IsSet() {
		t.Email = s.Email.MustGet()
	}
	if s.Password.IsSet() {
		t.Password = s.Password.MustGet()
	}
	if s.CreatedAt.IsSet() {
		t.CreatedAt = s.CreatedAt.MustGet()
	}
	if s.UpdatedAt.IsSet() {
		t.UpdatedAt = s.UpdatedAt.MustGet()
	}
}

func (s *UserSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return Users.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 6)
		if s.ID.IsSet() {
			vals[0] = psql.Arg(s.ID.MustGet())
		} else {
			vals[0] = psql.Raw("DEFAULT")
		}

		if s.Name.IsSet() {
			vals[1] = psql.Arg(s.Name.MustGet())
		} else {
			vals[1] = psql.Raw("DEFAULT")
		}

		if s.Email.IsSet() {
			vals[2] = psql.Arg(s.Email.MustGet())
		} else {
			vals[2] = psql.Raw("DEFAULT")
		}

		if s.Password.IsSet() {
			vals[3] = psql.Arg(s.Password.MustGet())
		} else {
			vals[3] = psql.Raw("DEFAULT")
		}

		if s.CreatedAt.IsSet() {
			vals[4] = psql.Arg(s.CreatedAt.MustGet())
		} else {
			vals[4] = psql.Raw("DEFAULT")
		}

		if s.UpdatedAt.IsSet() {
			vals[5] = psql.Arg(s.UpdatedAt.MustGet())
		} else {
			vals[5] = psql.Raw("DEFAULT")
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s UserSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s UserSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 6)

	if s.ID.IsSet() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "id")...),
			psql.Arg(s.ID),
		}})
	}

	if s.Name.IsSet() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "name")...),
			psql.Arg(s.Name),
		}})
	}

	if s.Email.IsSet() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "email")...),
			psql.Arg(s.Email),
		}})
	}

	if s.Password.IsSet() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "password")...),
			psql.Arg(s.Password),
		}})
	}

	if s.CreatedAt.IsSet() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_at")...),
			psql.Arg(s.CreatedAt),
		}})
	}

	if s.UpdatedAt.IsSet() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "updated_at")...),
			psql.Arg(s.UpdatedAt),
		}})
	}

	return exprs
}

// FindUser retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindUser(ctx context.Context, exec bob.Executor, IDPK ulid.ULID, cols ...string) (*User, error) {
	if len(cols) == 0 {
		return Users.Query(
			SelectWhere.Users.ID.EQ(IDPK),
		).One(ctx, exec)
	}

	return Users.Query(
		SelectWhere.Users.ID.EQ(IDPK),
		sm.Columns(Users.Columns().Only(cols...)),
	).One(ctx, exec)
}

// UserExists checks the presence of a single record by primary key
func UserExists(ctx context.Context, exec bob.Executor, IDPK ulid.ULID) (bool, error) {
	return Users.Query(
		SelectWhere.Users.ID.EQ(IDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after User is retrieved from the database
func (o *User) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Users.AfterSelectHooks.RunHooks(ctx, exec, UserSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = Users.AfterInsertHooks.RunHooks(ctx, exec, UserSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = Users.AfterUpdateHooks.RunHooks(ctx, exec, UserSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = Users.AfterDeleteHooks.RunHooks(ctx, exec, UserSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the User
func (o *User) primaryKeyVals() bob.Expression {
	return psql.Arg(o.ID)
}

func (o *User) pkEQ() dialect.Expression {
	return psql.Quote("users", "id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the User
func (o *User) Update(ctx context.Context, exec bob.Executor, s *UserSetter) error {
	v, err := Users.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single User record with an executor
func (o *User) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := Users.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the User using the executor
func (o *User) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Users.Query(
		SelectWhere.Users.ID.EQ(o.ID),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after UserSlice is retrieved from the database
func (o UserSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Users.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = Users.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = Users.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = Users.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o UserSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("users", "id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o UserSlice) copyMatchingRows(from ...*User) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o UserSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Users.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *User:
				o.copyMatchingRows(retrieved)
			case []*User:
				o.copyMatchingRows(retrieved...)
			case UserSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a User or a slice of User
				// then run the AfterUpdateHooks on the slice
				_, err = Users.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o UserSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Users.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *User:
				o.copyMatchingRows(retrieved)
			case []*User:
				o.copyMatchingRows(retrieved...)
			case UserSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a User or a slice of User
				// then run the AfterDeleteHooks on the slice
				_, err = Users.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o UserSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals UserSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Users.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o UserSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Users.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o UserSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := Users.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type userJoins[Q dialect.Joinable] struct {
	typ         string
	PrivateKeys modAs[Q, privateKeyColumns]
	Projects    modAs[Q, projectColumns]
	Servers     modAs[Q, serverColumns]
	Sessions    modAs[Q, sessionColumns]
}

func (j userJoins[Q]) aliasedAs(alias string) userJoins[Q] {
	return buildUserJoins[Q](buildUserColumns(alias), j.typ)
}

func buildUserJoins[Q dialect.Joinable](cols userColumns, typ string) userJoins[Q] {
	return userJoins[Q]{
		typ: typ,
		PrivateKeys: modAs[Q, privateKeyColumns]{
			c: PrivateKeyColumns,
			f: func(to privateKeyColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, PrivateKeys.Name().As(to.Alias())).On(
						to.UserID.EQ(cols.ID),
					))
				}

				return mods
			},
		},
		Projects: modAs[Q, projectColumns]{
			c: ProjectColumns,
			f: func(to projectColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Projects.Name().As(to.Alias())).On(
						to.UserID.EQ(cols.ID),
					))
				}

				return mods
			},
		},
		Servers: modAs[Q, serverColumns]{
			c: ServerColumns,
			f: func(to serverColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Servers.Name().As(to.Alias())).On(
						to.UserID.EQ(cols.ID),
					))
				}

				return mods
			},
		},
		Sessions: modAs[Q, sessionColumns]{
			c: SessionColumns,
			f: func(to sessionColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Sessions.Name().As(to.Alias())).On(
						to.UserID.EQ(cols.ID),
					))
				}

				return mods
			},
		},
	}
}

// PrivateKeys starts a query for related objects on private_keys
func (o *User) PrivateKeys(mods ...bob.Mod[*dialect.SelectQuery]) PrivateKeysQuery {
	return PrivateKeys.Query(append(mods,
		sm.Where(PrivateKeyColumns.UserID.EQ(psql.Arg(o.ID))),
	)...)
}

func (os UserSlice) PrivateKeys(mods ...bob.Mod[*dialect.SelectQuery]) PrivateKeysQuery {
	pkID := make(pgtypes.Array[ulid.ULID], len(os))
	for i, o := range os {
		pkID[i] = o.ID
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkID), "bytea[]")),
	))

	return PrivateKeys.Query(append(mods,
		sm.Where(psql.Group(PrivateKeyColumns.UserID).OP("IN", PKArgExpr)),
	)...)
}

// Projects starts a query for related objects on projects
func (o *User) Projects(mods ...bob.Mod[*dialect.SelectQuery]) ProjectsQuery {
	return Projects.Query(append(mods,
		sm.Where(ProjectColumns.UserID.EQ(psql.Arg(o.ID))),
	)...)
}

func (os UserSlice) Projects(mods ...bob.Mod[*dialect.SelectQuery]) ProjectsQuery {
	pkID := make(pgtypes.Array[ulid.ULID], len(os))
	for i, o := range os {
		pkID[i] = o.ID
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkID), "bytea[]")),
	))

	return Projects.Query(append(mods,
		sm.Where(psql.Group(ProjectColumns.UserID).OP("IN", PKArgExpr)),
	)...)
}

// Servers starts a query for related objects on servers
func (o *User) Servers(mods ...bob.Mod[*dialect.SelectQuery]) ServersQuery {
	return Servers.Query(append(mods,
		sm.Where(ServerColumns.UserID.EQ(psql.Arg(o.ID))),
	)...)
}

func (os UserSlice) Servers(mods ...bob.Mod[*dialect.SelectQuery]) ServersQuery {
	pkID := make(pgtypes.Array[ulid.ULID], len(os))
	for i, o := range os {
		pkID[i] = o.ID
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkID), "bytea[]")),
	))

	return Servers.Query(append(mods,
		sm.Where(psql.Group(ServerColumns.UserID).OP("IN", PKArgExpr)),
	)...)
}

// Sessions starts a query for related objects on sessions
func (o *User) Sessions(mods ...bob.Mod[*dialect.SelectQuery]) SessionsQuery {
	return Sessions.Query(append(mods,
		sm.Where(SessionColumns.UserID.EQ(psql.Arg(o.ID))),
	)...)
}

func (os UserSlice) Sessions(mods ...bob.Mod[*dialect.SelectQuery]) SessionsQuery {
	pkID := make(pgtypes.Array[ulid.ULID], len(os))
	for i, o := range os {
		pkID[i] = o.ID
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkID), "bytea[]")),
	))

	return Sessions.Query(append(mods,
		sm.Where(psql.Group(SessionColumns.UserID).OP("IN", PKArgExpr)),
	)...)
}

func (o *User) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "PrivateKeys":
		rels, ok := retrieved.(PrivateKeySlice)
		if !ok {
			return fmt.Errorf("user cannot load %T as %q", retrieved, name)
		}

		o.R.PrivateKeys = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.User = o
			}
		}
		return nil
	case "Projects":
		rels, ok := retrieved.(ProjectSlice)
		if !ok {
			return fmt.Errorf("user cannot load %T as %q", retrieved, name)
		}

		o.R.Projects = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.User = o
			}
		}
		return nil
	case "Servers":
		rels, ok := retrieved.(ServerSlice)
		if !ok {
			return fmt.Errorf("user cannot load %T as %q", retrieved, name)
		}

		o.R.Servers = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.User = o
			}
		}
		return nil
	case "Sessions":
		rels, ok := retrieved.(SessionSlice)
		if !ok {
			return fmt.Errorf("user cannot load %T as %q", retrieved, name)
		}

		o.R.Sessions = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.User = o
			}
		}
		return nil
	default:
		return fmt.Errorf("user has no relationship %q", name)
	}
}

type userPreloader struct{}

func buildUserPreloader() userPreloader {
	return userPreloader{}
}

type userThenLoader[Q orm.Loadable] struct {
	PrivateKeys func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
	Projects    func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
	Servers     func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
	Sessions    func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
}

func buildUserThenLoader[Q orm.Loadable]() userThenLoader[Q] {
	type PrivateKeysLoadInterface interface {
		LoadPrivateKeys(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}
	type ProjectsLoadInterface interface {
		LoadProjects(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}
	type ServersLoadInterface interface {
		LoadServers(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}
	type SessionsLoadInterface interface {
		LoadSessions(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}

	return userThenLoader[Q]{
		PrivateKeys: thenLoadBuilder[Q](
			"PrivateKeys",
			func(ctx context.Context, exec bob.Executor, retrieved PrivateKeysLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadPrivateKeys(ctx, exec, mods...)
			},
		),
		Projects: thenLoadBuilder[Q](
			"Projects",
			func(ctx context.Context, exec bob.Executor, retrieved ProjectsLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadProjects(ctx, exec, mods...)
			},
		),
		Servers: thenLoadBuilder[Q](
			"Servers",
			func(ctx context.Context, exec bob.Executor, retrieved ServersLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadServers(ctx, exec, mods...)
			},
		),
		Sessions: thenLoadBuilder[Q](
			"Sessions",
			func(ctx context.Context, exec bob.Executor, retrieved SessionsLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadSessions(ctx, exec, mods...)
			},
		),
	}
}

// LoadPrivateKeys loads the user's PrivateKeys into the .R struct
func (o *User) LoadPrivateKeys(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.PrivateKeys = nil

	related, err := o.PrivateKeys(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.User = o
	}

	o.R.PrivateKeys = related
	return nil
}

// LoadPrivateKeys loads the user's PrivateKeys into the .R struct
func (os UserSlice) LoadPrivateKeys(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	privateKeys, err := os.PrivateKeys(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		o.R.PrivateKeys = nil
	}

	for _, o := range os {
		for _, rel := range privateKeys {
			if o.ID != rel.UserID {
				continue
			}

			rel.R.User = o

			o.R.PrivateKeys = append(o.R.PrivateKeys, rel)
		}
	}

	return nil
}

// LoadProjects loads the user's Projects into the .R struct
func (o *User) LoadProjects(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Projects = nil

	related, err := o.Projects(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.User = o
	}

	o.R.Projects = related
	return nil
}

// LoadProjects loads the user's Projects into the .R struct
func (os UserSlice) LoadProjects(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	projects, err := os.Projects(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		o.R.Projects = nil
	}

	for _, o := range os {
		for _, rel := range projects {
			if o.ID != rel.UserID {
				continue
			}

			rel.R.User = o

			o.R.Projects = append(o.R.Projects, rel)
		}
	}

	return nil
}

// LoadServers loads the user's Servers into the .R struct
func (o *User) LoadServers(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Servers = nil

	related, err := o.Servers(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.User = o
	}

	o.R.Servers = related
	return nil
}

// LoadServers loads the user's Servers into the .R struct
func (os UserSlice) LoadServers(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	servers, err := os.Servers(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		o.R.Servers = nil
	}

	for _, o := range os {
		for _, rel := range servers {
			if o.ID != rel.UserID {
				continue
			}

			rel.R.User = o

			o.R.Servers = append(o.R.Servers, rel)
		}
	}

	return nil
}

// LoadSessions loads the user's Sessions into the .R struct
func (o *User) LoadSessions(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Sessions = nil

	related, err := o.Sessions(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.User = o
	}

	o.R.Sessions = related
	return nil
}

// LoadSessions loads the user's Sessions into the .R struct
func (os UserSlice) LoadSessions(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	sessions, err := os.Sessions(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		o.R.Sessions = nil
	}

	for _, o := range os {
		for _, rel := range sessions {
			if o.ID != rel.UserID {
				continue
			}

			rel.R.User = o

			o.R.Sessions = append(o.R.Sessions, rel)
		}
	}

	return nil
}

func insertUserPrivateKeys0(ctx context.Context, exec bob.Executor, privateKeys1 []*PrivateKeySetter, user0 *User) (PrivateKeySlice, error) {
	for i := range privateKeys1 {
		privateKeys1[i].UserID = omit.From(user0.ID)
	}

	ret, err := PrivateKeys.Insert(bob.ToMods(privateKeys1...)).All(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertUserPrivateKeys0: %w", err)
	}

	return ret, nil
}

func attachUserPrivateKeys0(ctx context.Context, exec bob.Executor, count int, privateKeys1 PrivateKeySlice, user0 *User) (PrivateKeySlice, error) {
	setter := &PrivateKeySetter{
		UserID: omit.From(user0.ID),
	}

	err := privateKeys1.UpdateAll(ctx, exec, *setter)
	if err != nil {
		return nil, fmt.Errorf("attachUserPrivateKeys0: %w", err)
	}

	return privateKeys1, nil
}

func (user0 *User) InsertPrivateKeys(ctx context.Context, exec bob.Executor, related ...*PrivateKeySetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	privateKeys1, err := insertUserPrivateKeys0(ctx, exec, related, user0)
	if err != nil {
		return err
	}

	user0.R.PrivateKeys = append(user0.R.PrivateKeys, privateKeys1...)

	for _, rel := range privateKeys1 {
		rel.R.User = user0
	}
	return nil
}

func (user0 *User) AttachPrivateKeys(ctx context.Context, exec bob.Executor, related ...*PrivateKey) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	privateKeys1 := PrivateKeySlice(related)

	_, err = attachUserPrivateKeys0(ctx, exec, len(related), privateKeys1, user0)
	if err != nil {
		return err
	}

	user0.R.PrivateKeys = append(user0.R.PrivateKeys, privateKeys1...)

	for _, rel := range related {
		rel.R.User = user0
	}

	return nil
}

func insertUserProjects0(ctx context.Context, exec bob.Executor, projects1 []*ProjectSetter, user0 *User) (ProjectSlice, error) {
	for i := range projects1 {
		projects1[i].UserID = omit.From(user0.ID)
	}

	ret, err := Projects.Insert(bob.ToMods(projects1...)).All(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertUserProjects0: %w", err)
	}

	return ret, nil
}

func attachUserProjects0(ctx context.Context, exec bob.Executor, count int, projects1 ProjectSlice, user0 *User) (ProjectSlice, error) {
	setter := &ProjectSetter{
		UserID: omit.From(user0.ID),
	}

	err := projects1.UpdateAll(ctx, exec, *setter)
	if err != nil {
		return nil, fmt.Errorf("attachUserProjects0: %w", err)
	}

	return projects1, nil
}

func (user0 *User) InsertProjects(ctx context.Context, exec bob.Executor, related ...*ProjectSetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	projects1, err := insertUserProjects0(ctx, exec, related, user0)
	if err != nil {
		return err
	}

	user0.R.Projects = append(user0.R.Projects, projects1...)

	for _, rel := range projects1 {
		rel.R.User = user0
	}
	return nil
}

func (user0 *User) AttachProjects(ctx context.Context, exec bob.Executor, related ...*Project) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	projects1 := ProjectSlice(related)

	_, err = attachUserProjects0(ctx, exec, len(related), projects1, user0)
	if err != nil {
		return err
	}

	user0.R.Projects = append(user0.R.Projects, projects1...)

	for _, rel := range related {
		rel.R.User = user0
	}

	return nil
}

func insertUserServers0(ctx context.Context, exec bob.Executor, servers1 []*ServerSetter, user0 *User) (ServerSlice, error) {
	for i := range servers1 {
		servers1[i].UserID = omit.From(user0.ID)
	}

	ret, err := Servers.Insert(bob.ToMods(servers1...)).All(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertUserServers0: %w", err)
	}

	return ret, nil
}

func attachUserServers0(ctx context.Context, exec bob.Executor, count int, servers1 ServerSlice, user0 *User) (ServerSlice, error) {
	setter := &ServerSetter{
		UserID: omit.From(user0.ID),
	}

	err := servers1.UpdateAll(ctx, exec, *setter)
	if err != nil {
		return nil, fmt.Errorf("attachUserServers0: %w", err)
	}

	return servers1, nil
}

func (user0 *User) InsertServers(ctx context.Context, exec bob.Executor, related ...*ServerSetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	servers1, err := insertUserServers0(ctx, exec, related, user0)
	if err != nil {
		return err
	}

	user0.R.Servers = append(user0.R.Servers, servers1...)

	for _, rel := range servers1 {
		rel.R.User = user0
	}
	return nil
}

func (user0 *User) AttachServers(ctx context.Context, exec bob.Executor, related ...*Server) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	servers1 := ServerSlice(related)

	_, err = attachUserServers0(ctx, exec, len(related), servers1, user0)
	if err != nil {
		return err
	}

	user0.R.Servers = append(user0.R.Servers, servers1...)

	for _, rel := range related {
		rel.R.User = user0
	}

	return nil
}

func insertUserSessions0(ctx context.Context, exec bob.Executor, sessions1 []*SessionSetter, user0 *User) (SessionSlice, error) {
	for i := range sessions1 {
		sessions1[i].UserID = omit.From(user0.ID)
	}

	ret, err := Sessions.Insert(bob.ToMods(sessions1...)).All(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertUserSessions0: %w", err)
	}

	return ret, nil
}

func attachUserSessions0(ctx context.Context, exec bob.Executor, count int, sessions1 SessionSlice, user0 *User) (SessionSlice, error) {
	setter := &SessionSetter{
		UserID: omit.From(user0.ID),
	}

	err := sessions1.UpdateAll(ctx, exec, *setter)
	if err != nil {
		return nil, fmt.Errorf("attachUserSessions0: %w", err)
	}

	return sessions1, nil
}

func (user0 *User) InsertSessions(ctx context.Context, exec bob.Executor, related ...*SessionSetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	sessions1, err := insertUserSessions0(ctx, exec, related, user0)
	if err != nil {
		return err
	}

	user0.R.Sessions = append(user0.R.Sessions, sessions1...)

	for _, rel := range sessions1 {
		rel.R.User = user0
	}
	return nil
}

func (user0 *User) AttachSessions(ctx context.Context, exec bob.Executor, related ...*Session) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	sessions1 := SessionSlice(related)

	_, err = attachUserSessions0(ctx, exec, len(related), sessions1, user0)
	if err != nil {
		return err
	}

	user0.R.Sessions = append(user0.R.Sessions, sessions1...)

	for _, rel := range related {
		rel.R.User = user0
	}

	return nil
}
