// Code generated by BobGen psql v0.0.0-20250612114253-14d7148b83cb. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"fmt"
	"io"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/oklog/ulid/v2"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
	"github.com/stephenafamo/bob/types/pgtypes"
)

// Project is an object representing the database table.
type Project struct {
	ID          ulid.ULID        `db:"id,pk" json:"id"`
	Name        string           `db:"name" json:"name"`
	UserID      ulid.ULID        `db:"user_id" json:"user_id"`
	Description null.Val[string] `db:"description" json:"description"`
	CreatedAt   time.Time        `db:"created_at" json:"created_at"`
	UpdatedAt   time.Time        `db:"updated_at" json:"updated_at"`

	R projectR `db:"-" json:"-"`
}

// ProjectSlice is an alias for a slice of pointers to Project.
// This should almost always be used instead of []*Project.
type ProjectSlice []*Project

// Projects contains methods to work with the projects table
var Projects = psql.NewTablex[*Project, ProjectSlice, *ProjectSetter]("", "projects")

// ProjectsQuery is a query on the projects table
type ProjectsQuery = *psql.ViewQuery[*Project, ProjectSlice]

// projectR is where relationships are stored.
type projectR struct {
	Environments EnvironmentSlice `json:"Environments"` // environments.environments_project_id_fkey
	User         *User            `json:"User"`         // projects.projects_user_id_fkey
}

type projectColumnNames struct {
	ID          string
	Name        string
	UserID      string
	Description string
	CreatedAt   string
	UpdatedAt   string
}

var ProjectColumns = buildProjectColumns("projects")

type projectColumns struct {
	tableAlias  string
	ID          psql.Expression
	Name        psql.Expression
	UserID      psql.Expression
	Description psql.Expression
	CreatedAt   psql.Expression
	UpdatedAt   psql.Expression
}

func (c projectColumns) Alias() string {
	return c.tableAlias
}

func (projectColumns) AliasedAs(alias string) projectColumns {
	return buildProjectColumns(alias)
}

func buildProjectColumns(alias string) projectColumns {
	return projectColumns{
		tableAlias:  alias,
		ID:          psql.Quote(alias, "id"),
		Name:        psql.Quote(alias, "name"),
		UserID:      psql.Quote(alias, "user_id"),
		Description: psql.Quote(alias, "description"),
		CreatedAt:   psql.Quote(alias, "created_at"),
		UpdatedAt:   psql.Quote(alias, "updated_at"),
	}
}

type projectWhere[Q psql.Filterable] struct {
	ID          psql.WhereMod[Q, ulid.ULID]
	Name        psql.WhereMod[Q, string]
	UserID      psql.WhereMod[Q, ulid.ULID]
	Description psql.WhereNullMod[Q, string]
	CreatedAt   psql.WhereMod[Q, time.Time]
	UpdatedAt   psql.WhereMod[Q, time.Time]
}

func (projectWhere[Q]) AliasedAs(alias string) projectWhere[Q] {
	return buildProjectWhere[Q](buildProjectColumns(alias))
}

func buildProjectWhere[Q psql.Filterable](cols projectColumns) projectWhere[Q] {
	return projectWhere[Q]{
		ID:          psql.Where[Q, ulid.ULID](cols.ID),
		Name:        psql.Where[Q, string](cols.Name),
		UserID:      psql.Where[Q, ulid.ULID](cols.UserID),
		Description: psql.WhereNull[Q, string](cols.Description),
		CreatedAt:   psql.Where[Q, time.Time](cols.CreatedAt),
		UpdatedAt:   psql.Where[Q, time.Time](cols.UpdatedAt),
	}
}

var ProjectErrors = &projectErrors{
	ErrUniqueProjectsPkey: &UniqueConstraintError{
		schema:  "",
		table:   "projects",
		columns: []string{"id"},
		s:       "projects_pkey",
	},
}

type projectErrors struct {
	ErrUniqueProjectsPkey *UniqueConstraintError
}

// ProjectSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type ProjectSetter struct {
	ID          omit.Val[ulid.ULID]  `db:"id,pk" json:"id"`
	Name        omit.Val[string]     `db:"name" json:"name"`
	UserID      omit.Val[ulid.ULID]  `db:"user_id" json:"user_id"`
	Description omitnull.Val[string] `db:"description" json:"description"`
	CreatedAt   omit.Val[time.Time]  `db:"created_at" json:"created_at"`
	UpdatedAt   omit.Val[time.Time]  `db:"updated_at" json:"updated_at"`
}

func (s ProjectSetter) SetColumns() []string {
	vals := make([]string, 0, 6)
	if s.ID.IsSet() {
		vals = append(vals, "id")
	}
	if s.Name.IsSet() {
		vals = append(vals, "name")
	}
	if s.UserID.IsSet() {
		vals = append(vals, "user_id")
	}
	if !s.Description.IsUnset() {
		vals = append(vals, "description")
	}
	if s.CreatedAt.IsSet() {
		vals = append(vals, "created_at")
	}
	if s.UpdatedAt.IsSet() {
		vals = append(vals, "updated_at")
	}
	return vals
}

func (s ProjectSetter) Overwrite(t *Project) {
	if s.ID.IsSet() {
		t.ID = s.ID.MustGet()
	}
	if s.Name.IsSet() {
		t.Name = s.Name.MustGet()
	}
	if s.UserID.IsSet() {
		t.UserID = s.UserID.MustGet()
	}
	if !s.Description.IsUnset() {
		t.Description = s.Description.MustGetNull()
	}
	if s.CreatedAt.IsSet() {
		t.CreatedAt = s.CreatedAt.MustGet()
	}
	if s.UpdatedAt.IsSet() {
		t.UpdatedAt = s.UpdatedAt.MustGet()
	}
}

func (s *ProjectSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return Projects.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 6)
		if s.ID.IsSet() {
			vals[0] = psql.Arg(s.ID.MustGet())
		} else {
			vals[0] = psql.Raw("DEFAULT")
		}

		if s.Name.IsSet() {
			vals[1] = psql.Arg(s.Name.MustGet())
		} else {
			vals[1] = psql.Raw("DEFAULT")
		}

		if s.UserID.IsSet() {
			vals[2] = psql.Arg(s.UserID.MustGet())
		} else {
			vals[2] = psql.Raw("DEFAULT")
		}

		if !s.Description.IsUnset() {
			vals[3] = psql.Arg(s.Description.MustGetNull())
		} else {
			vals[3] = psql.Raw("DEFAULT")
		}

		if s.CreatedAt.IsSet() {
			vals[4] = psql.Arg(s.CreatedAt.MustGet())
		} else {
			vals[4] = psql.Raw("DEFAULT")
		}

		if s.UpdatedAt.IsSet() {
			vals[5] = psql.Arg(s.UpdatedAt.MustGet())
		} else {
			vals[5] = psql.Raw("DEFAULT")
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s ProjectSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s ProjectSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 6)

	if s.ID.IsSet() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "id")...),
			psql.Arg(s.ID),
		}})
	}

	if s.Name.IsSet() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "name")...),
			psql.Arg(s.Name),
		}})
	}

	if s.UserID.IsSet() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "user_id")...),
			psql.Arg(s.UserID),
		}})
	}

	if !s.Description.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "description")...),
			psql.Arg(s.Description),
		}})
	}

	if s.CreatedAt.IsSet() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_at")...),
			psql.Arg(s.CreatedAt),
		}})
	}

	if s.UpdatedAt.IsSet() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "updated_at")...),
			psql.Arg(s.UpdatedAt),
		}})
	}

	return exprs
}

// FindProject retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindProject(ctx context.Context, exec bob.Executor, IDPK ulid.ULID, cols ...string) (*Project, error) {
	if len(cols) == 0 {
		return Projects.Query(
			SelectWhere.Projects.ID.EQ(IDPK),
		).One(ctx, exec)
	}

	return Projects.Query(
		SelectWhere.Projects.ID.EQ(IDPK),
		sm.Columns(Projects.Columns().Only(cols...)),
	).One(ctx, exec)
}

// ProjectExists checks the presence of a single record by primary key
func ProjectExists(ctx context.Context, exec bob.Executor, IDPK ulid.ULID) (bool, error) {
	return Projects.Query(
		SelectWhere.Projects.ID.EQ(IDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after Project is retrieved from the database
func (o *Project) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Projects.AfterSelectHooks.RunHooks(ctx, exec, ProjectSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = Projects.AfterInsertHooks.RunHooks(ctx, exec, ProjectSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = Projects.AfterUpdateHooks.RunHooks(ctx, exec, ProjectSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = Projects.AfterDeleteHooks.RunHooks(ctx, exec, ProjectSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the Project
func (o *Project) primaryKeyVals() bob.Expression {
	return psql.Arg(o.ID)
}

func (o *Project) pkEQ() dialect.Expression {
	return psql.Quote("projects", "id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the Project
func (o *Project) Update(ctx context.Context, exec bob.Executor, s *ProjectSetter) error {
	v, err := Projects.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single Project record with an executor
func (o *Project) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := Projects.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the Project using the executor
func (o *Project) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Projects.Query(
		SelectWhere.Projects.ID.EQ(o.ID),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after ProjectSlice is retrieved from the database
func (o ProjectSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Projects.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = Projects.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = Projects.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = Projects.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o ProjectSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("projects", "id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o ProjectSlice) copyMatchingRows(from ...*Project) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o ProjectSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Projects.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Project:
				o.copyMatchingRows(retrieved)
			case []*Project:
				o.copyMatchingRows(retrieved...)
			case ProjectSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Project or a slice of Project
				// then run the AfterUpdateHooks on the slice
				_, err = Projects.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o ProjectSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Projects.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Project:
				o.copyMatchingRows(retrieved)
			case []*Project:
				o.copyMatchingRows(retrieved...)
			case ProjectSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Project or a slice of Project
				// then run the AfterDeleteHooks on the slice
				_, err = Projects.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o ProjectSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals ProjectSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Projects.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o ProjectSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Projects.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o ProjectSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := Projects.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type projectJoins[Q dialect.Joinable] struct {
	typ          string
	Environments modAs[Q, environmentColumns]
	User         modAs[Q, userColumns]
}

func (j projectJoins[Q]) aliasedAs(alias string) projectJoins[Q] {
	return buildProjectJoins[Q](buildProjectColumns(alias), j.typ)
}

func buildProjectJoins[Q dialect.Joinable](cols projectColumns, typ string) projectJoins[Q] {
	return projectJoins[Q]{
		typ: typ,
		Environments: modAs[Q, environmentColumns]{
			c: EnvironmentColumns,
			f: func(to environmentColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Environments.Name().As(to.Alias())).On(
						to.ProjectID.EQ(cols.ID),
					))
				}

				return mods
			},
		},
		User: modAs[Q, userColumns]{
			c: UserColumns,
			f: func(to userColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Users.Name().As(to.Alias())).On(
						to.ID.EQ(cols.UserID),
					))
				}

				return mods
			},
		},
	}
}

// Environments starts a query for related objects on environments
func (o *Project) Environments(mods ...bob.Mod[*dialect.SelectQuery]) EnvironmentsQuery {
	return Environments.Query(append(mods,
		sm.Where(EnvironmentColumns.ProjectID.EQ(psql.Arg(o.ID))),
	)...)
}

func (os ProjectSlice) Environments(mods ...bob.Mod[*dialect.SelectQuery]) EnvironmentsQuery {
	pkID := make(pgtypes.Array[ulid.ULID], len(os))
	for i, o := range os {
		pkID[i] = o.ID
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkID), "bytea[]")),
	))

	return Environments.Query(append(mods,
		sm.Where(psql.Group(EnvironmentColumns.ProjectID).OP("IN", PKArgExpr)),
	)...)
}

// User starts a query for related objects on users
func (o *Project) User(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	return Users.Query(append(mods,
		sm.Where(UserColumns.ID.EQ(psql.Arg(o.UserID))),
	)...)
}

func (os ProjectSlice) User(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	pkUserID := make(pgtypes.Array[ulid.ULID], len(os))
	for i, o := range os {
		pkUserID[i] = o.UserID
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkUserID), "bytea[]")),
	))

	return Users.Query(append(mods,
		sm.Where(psql.Group(UserColumns.ID).OP("IN", PKArgExpr)),
	)...)
}

func (o *Project) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "Environments":
		rels, ok := retrieved.(EnvironmentSlice)
		if !ok {
			return fmt.Errorf("project cannot load %T as %q", retrieved, name)
		}

		o.R.Environments = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.Project = o
			}
		}
		return nil
	case "User":
		rel, ok := retrieved.(*User)
		if !ok {
			return fmt.Errorf("project cannot load %T as %q", retrieved, name)
		}

		o.R.User = rel

		if rel != nil {
			rel.R.Projects = ProjectSlice{o}
		}
		return nil
	default:
		return fmt.Errorf("project has no relationship %q", name)
	}
}

type projectPreloader struct {
	User func(...psql.PreloadOption) psql.Preloader
}

func buildProjectPreloader() projectPreloader {
	return projectPreloader{
		User: func(opts ...psql.PreloadOption) psql.Preloader {
			return psql.Preload[*User, UserSlice](orm.Relationship{
				Name: "User",
				Sides: []orm.RelSide{
					{
						From: TableNames.Projects,
						To:   TableNames.Users,
						FromColumns: []string{
							ColumnNames.Projects.UserID,
						},
						ToColumns: []string{
							ColumnNames.Users.ID,
						},
					},
				},
			}, Users.Columns().Names(), opts...)
		},
	}
}

type projectThenLoader[Q orm.Loadable] struct {
	Environments func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
	User         func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
}

func buildProjectThenLoader[Q orm.Loadable]() projectThenLoader[Q] {
	type EnvironmentsLoadInterface interface {
		LoadEnvironments(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}
	type UserLoadInterface interface {
		LoadUser(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}

	return projectThenLoader[Q]{
		Environments: thenLoadBuilder[Q](
			"Environments",
			func(ctx context.Context, exec bob.Executor, retrieved EnvironmentsLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadEnvironments(ctx, exec, mods...)
			},
		),
		User: thenLoadBuilder[Q](
			"User",
			func(ctx context.Context, exec bob.Executor, retrieved UserLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadUser(ctx, exec, mods...)
			},
		),
	}
}

// LoadEnvironments loads the project's Environments into the .R struct
func (o *Project) LoadEnvironments(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Environments = nil

	related, err := o.Environments(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.Project = o
	}

	o.R.Environments = related
	return nil
}

// LoadEnvironments loads the project's Environments into the .R struct
func (os ProjectSlice) LoadEnvironments(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	environments, err := os.Environments(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		o.R.Environments = nil
	}

	for _, o := range os {
		for _, rel := range environments {
			if o.ID != rel.ProjectID {
				continue
			}

			rel.R.Project = o

			o.R.Environments = append(o.R.Environments, rel)
		}
	}

	return nil
}

// LoadUser loads the project's User into the .R struct
func (o *Project) LoadUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.User = nil

	related, err := o.User(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.Projects = ProjectSlice{o}

	o.R.User = related
	return nil
}

// LoadUser loads the project's User into the .R struct
func (os ProjectSlice) LoadUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	users, err := os.User(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range users {
			if o.UserID != rel.ID {
				continue
			}

			rel.R.Projects = append(rel.R.Projects, o)

			o.R.User = rel
			break
		}
	}

	return nil
}

func insertProjectEnvironments0(ctx context.Context, exec bob.Executor, environments1 []*EnvironmentSetter, project0 *Project) (EnvironmentSlice, error) {
	for i := range environments1 {
		environments1[i].ProjectID = omit.From(project0.ID)
	}

	ret, err := Environments.Insert(bob.ToMods(environments1...)).All(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertProjectEnvironments0: %w", err)
	}

	return ret, nil
}

func attachProjectEnvironments0(ctx context.Context, exec bob.Executor, count int, environments1 EnvironmentSlice, project0 *Project) (EnvironmentSlice, error) {
	setter := &EnvironmentSetter{
		ProjectID: omit.From(project0.ID),
	}

	err := environments1.UpdateAll(ctx, exec, *setter)
	if err != nil {
		return nil, fmt.Errorf("attachProjectEnvironments0: %w", err)
	}

	return environments1, nil
}

func (project0 *Project) InsertEnvironments(ctx context.Context, exec bob.Executor, related ...*EnvironmentSetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	environments1, err := insertProjectEnvironments0(ctx, exec, related, project0)
	if err != nil {
		return err
	}

	project0.R.Environments = append(project0.R.Environments, environments1...)

	for _, rel := range environments1 {
		rel.R.Project = project0
	}
	return nil
}

func (project0 *Project) AttachEnvironments(ctx context.Context, exec bob.Executor, related ...*Environment) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	environments1 := EnvironmentSlice(related)

	_, err = attachProjectEnvironments0(ctx, exec, len(related), environments1, project0)
	if err != nil {
		return err
	}

	project0.R.Environments = append(project0.R.Environments, environments1...)

	for _, rel := range related {
		rel.R.Project = project0
	}

	return nil
}

func attachProjectUser0(ctx context.Context, exec bob.Executor, count int, project0 *Project, user1 *User) (*Project, error) {
	setter := &ProjectSetter{
		UserID: omit.From(user1.ID),
	}

	err := project0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachProjectUser0: %w", err)
	}

	return project0, nil
}

func (project0 *Project) InsertUser(ctx context.Context, exec bob.Executor, related *UserSetter) error {
	user1, err := Users.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachProjectUser0(ctx, exec, 1, project0, user1)
	if err != nil {
		return err
	}

	project0.R.User = user1

	user1.R.Projects = append(user1.R.Projects, project0)

	return nil
}

func (project0 *Project) AttachUser(ctx context.Context, exec bob.Executor, user1 *User) error {
	var err error

	_, err = attachProjectUser0(ctx, exec, 1, project0, user1)
	if err != nil {
		return err
	}

	project0.R.User = user1

	user1.R.Projects = append(user1.R.Projects, project0)

	return nil
}
