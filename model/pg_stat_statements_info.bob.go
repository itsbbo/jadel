// Code generated by BobGen psql v0.38.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"time"

	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
)

// PGStatStatementsInfo is an object representing the database table.
type PGStatStatementsInfo struct {
	Dealloc    sql.Null[int64]     `db:"dealloc" `
	StatsReset sql.Null[time.Time] `db:"stats_reset" `
}

// PGStatStatementsInfoSlice is an alias for a slice of pointers to PGStatStatementsInfo.
// This should almost always be used instead of []*PGStatStatementsInfo.
type PGStatStatementsInfoSlice []*PGStatStatementsInfo

// PGStatStatementsInfos contains methods to work with the pg_stat_statements_info view
var PGStatStatementsInfos = psql.NewViewx[*PGStatStatementsInfo, PGStatStatementsInfoSlice]("", "pg_stat_statements_info")

// PGStatStatementsInfosQuery is a query on the pg_stat_statements_info view
type PGStatStatementsInfosQuery = *psql.ViewQuery[*PGStatStatementsInfo, PGStatStatementsInfoSlice]

type pgStatStatementsInfoColumnNames struct {
	Dealloc    string
	StatsReset string
}

var PGStatStatementsInfoColumns = buildPGStatStatementsInfoColumns("pg_stat_statements_info")

type pgStatStatementsInfoColumns struct {
	tableAlias string
	Dealloc    psql.Expression
	StatsReset psql.Expression
}

func (c pgStatStatementsInfoColumns) Alias() string {
	return c.tableAlias
}

func (pgStatStatementsInfoColumns) AliasedAs(alias string) pgStatStatementsInfoColumns {
	return buildPGStatStatementsInfoColumns(alias)
}

func buildPGStatStatementsInfoColumns(alias string) pgStatStatementsInfoColumns {
	return pgStatStatementsInfoColumns{
		tableAlias: alias,
		Dealloc:    psql.Quote(alias, "dealloc"),
		StatsReset: psql.Quote(alias, "stats_reset"),
	}
}

type pgStatStatementsInfoWhere[Q psql.Filterable] struct {
	Dealloc    psql.WhereNullMod[Q, int64]
	StatsReset psql.WhereNullMod[Q, time.Time]
}

func (pgStatStatementsInfoWhere[Q]) AliasedAs(alias string) pgStatStatementsInfoWhere[Q] {
	return buildPGStatStatementsInfoWhere[Q](buildPGStatStatementsInfoColumns(alias))
}

func buildPGStatStatementsInfoWhere[Q psql.Filterable](cols pgStatStatementsInfoColumns) pgStatStatementsInfoWhere[Q] {
	return pgStatStatementsInfoWhere[Q]{
		Dealloc:    psql.WhereNull[Q, int64](cols.Dealloc),
		StatsReset: psql.WhereNull[Q, time.Time](cols.StatsReset),
	}
}

// AfterQueryHook is called after PGStatStatementsInfo is retrieved from the database
func (o *PGStatStatementsInfo) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = PGStatStatementsInfos.AfterSelectHooks.RunHooks(ctx, exec, PGStatStatementsInfoSlice{o})
	}

	return err
}

// AfterQueryHook is called after PGStatStatementsInfoSlice is retrieved from the database
func (o PGStatStatementsInfoSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = PGStatStatementsInfos.AfterSelectHooks.RunHooks(ctx, exec, o)
	}

	return err
}
