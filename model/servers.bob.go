// Code generated by BobGen psql v0.38.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"fmt"
	"io"
	"time"

	"github.com/oklog/ulid/v2"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
	"github.com/stephenafamo/bob/types/pgtypes"
)

// Server is an object representing the database table.
type Server struct {
	ID           ulid.ULID        `db:"id,pk" `
	Name         string           `db:"name" `
	Description  sql.Null[string] `db:"description" `
	IP           string           `db:"ip" `
	Port         int32            `db:"port" `
	Username     string           `db:"username" `
	PrivateKeyID ulid.ULID        `db:"private_key_id" `
	CreatedAt    time.Time        `db:"created_at" `
	UpdatedAt    time.Time        `db:"updated_at" `

	R serverR `db:"-" `
}

// ServerSlice is an alias for a slice of pointers to Server.
// This should almost always be used instead of []*Server.
type ServerSlice []*Server

// Servers contains methods to work with the servers table
var Servers = psql.NewTablex[*Server, ServerSlice, *ServerSetter]("", "servers")

// ServersQuery is a query on the servers table
type ServersQuery = *psql.ViewQuery[*Server, ServerSlice]

// serverR is where relationships are stored.
type serverR struct {
	PrivateKey *PrivateKey // servers.servers_private_key_id_fkey
}

type serverColumnNames struct {
	ID           string
	Name         string
	Description  string
	IP           string
	Port         string
	Username     string
	PrivateKeyID string
	CreatedAt    string
	UpdatedAt    string
}

var ServerColumns = buildServerColumns("servers")

type serverColumns struct {
	tableAlias   string
	ID           psql.Expression
	Name         psql.Expression
	Description  psql.Expression
	IP           psql.Expression
	Port         psql.Expression
	Username     psql.Expression
	PrivateKeyID psql.Expression
	CreatedAt    psql.Expression
	UpdatedAt    psql.Expression
}

func (c serverColumns) Alias() string {
	return c.tableAlias
}

func (serverColumns) AliasedAs(alias string) serverColumns {
	return buildServerColumns(alias)
}

func buildServerColumns(alias string) serverColumns {
	return serverColumns{
		tableAlias:   alias,
		ID:           psql.Quote(alias, "id"),
		Name:         psql.Quote(alias, "name"),
		Description:  psql.Quote(alias, "description"),
		IP:           psql.Quote(alias, "ip"),
		Port:         psql.Quote(alias, "port"),
		Username:     psql.Quote(alias, "username"),
		PrivateKeyID: psql.Quote(alias, "private_key_id"),
		CreatedAt:    psql.Quote(alias, "created_at"),
		UpdatedAt:    psql.Quote(alias, "updated_at"),
	}
}

type serverWhere[Q psql.Filterable] struct {
	ID           psql.WhereMod[Q, ulid.ULID]
	Name         psql.WhereMod[Q, string]
	Description  psql.WhereNullMod[Q, string]
	IP           psql.WhereMod[Q, string]
	Port         psql.WhereMod[Q, int32]
	Username     psql.WhereMod[Q, string]
	PrivateKeyID psql.WhereMod[Q, ulid.ULID]
	CreatedAt    psql.WhereMod[Q, time.Time]
	UpdatedAt    psql.WhereMod[Q, time.Time]
}

func (serverWhere[Q]) AliasedAs(alias string) serverWhere[Q] {
	return buildServerWhere[Q](buildServerColumns(alias))
}

func buildServerWhere[Q psql.Filterable](cols serverColumns) serverWhere[Q] {
	return serverWhere[Q]{
		ID:           psql.Where[Q, ulid.ULID](cols.ID),
		Name:         psql.Where[Q, string](cols.Name),
		Description:  psql.WhereNull[Q, string](cols.Description),
		IP:           psql.Where[Q, string](cols.IP),
		Port:         psql.Where[Q, int32](cols.Port),
		Username:     psql.Where[Q, string](cols.Username),
		PrivateKeyID: psql.Where[Q, ulid.ULID](cols.PrivateKeyID),
		CreatedAt:    psql.Where[Q, time.Time](cols.CreatedAt),
		UpdatedAt:    psql.Where[Q, time.Time](cols.UpdatedAt),
	}
}

var ServerErrors = &serverErrors{
	ErrUniqueServersPkey: &UniqueConstraintError{
		schema:  "",
		table:   "servers",
		columns: []string{"id"},
		s:       "servers_pkey",
	},
}

type serverErrors struct {
	ErrUniqueServersPkey *UniqueConstraintError
}

// ServerSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type ServerSetter struct {
	ID           *ulid.ULID        `db:"id,pk" `
	Name         *string           `db:"name" `
	Description  *sql.Null[string] `db:"description" `
	IP           *string           `db:"ip" `
	Port         *int32            `db:"port" `
	Username     *string           `db:"username" `
	PrivateKeyID *ulid.ULID        `db:"private_key_id" `
	CreatedAt    *time.Time        `db:"created_at" `
	UpdatedAt    *time.Time        `db:"updated_at" `
}

func (s ServerSetter) SetColumns() []string {
	vals := make([]string, 0, 9)
	if s.ID != nil {
		vals = append(vals, "id")
	}

	if s.Name != nil {
		vals = append(vals, "name")
	}

	if s.Description != nil {
		vals = append(vals, "description")
	}

	if s.IP != nil {
		vals = append(vals, "ip")
	}

	if s.Port != nil {
		vals = append(vals, "port")
	}

	if s.Username != nil {
		vals = append(vals, "username")
	}

	if s.PrivateKeyID != nil {
		vals = append(vals, "private_key_id")
	}

	if s.CreatedAt != nil {
		vals = append(vals, "created_at")
	}

	if s.UpdatedAt != nil {
		vals = append(vals, "updated_at")
	}

	return vals
}

func (s ServerSetter) Overwrite(t *Server) {
	if s.ID != nil {
		t.ID = *s.ID
	}
	if s.Name != nil {
		t.Name = *s.Name
	}
	if s.Description != nil {
		t.Description = *s.Description
	}
	if s.IP != nil {
		t.IP = *s.IP
	}
	if s.Port != nil {
		t.Port = *s.Port
	}
	if s.Username != nil {
		t.Username = *s.Username
	}
	if s.PrivateKeyID != nil {
		t.PrivateKeyID = *s.PrivateKeyID
	}
	if s.CreatedAt != nil {
		t.CreatedAt = *s.CreatedAt
	}
	if s.UpdatedAt != nil {
		t.UpdatedAt = *s.UpdatedAt
	}
}

func (s *ServerSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return Servers.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 9)
		if s.ID != nil {
			vals[0] = psql.Arg(*s.ID)
		} else {
			vals[0] = psql.Raw("DEFAULT")
		}

		if s.Name != nil {
			vals[1] = psql.Arg(*s.Name)
		} else {
			vals[1] = psql.Raw("DEFAULT")
		}

		if s.Description != nil {
			vals[2] = psql.Arg(*s.Description)
		} else {
			vals[2] = psql.Raw("DEFAULT")
		}

		if s.IP != nil {
			vals[3] = psql.Arg(*s.IP)
		} else {
			vals[3] = psql.Raw("DEFAULT")
		}

		if s.Port != nil {
			vals[4] = psql.Arg(*s.Port)
		} else {
			vals[4] = psql.Raw("DEFAULT")
		}

		if s.Username != nil {
			vals[5] = psql.Arg(*s.Username)
		} else {
			vals[5] = psql.Raw("DEFAULT")
		}

		if s.PrivateKeyID != nil {
			vals[6] = psql.Arg(*s.PrivateKeyID)
		} else {
			vals[6] = psql.Raw("DEFAULT")
		}

		if s.CreatedAt != nil {
			vals[7] = psql.Arg(*s.CreatedAt)
		} else {
			vals[7] = psql.Raw("DEFAULT")
		}

		if s.UpdatedAt != nil {
			vals[8] = psql.Arg(*s.UpdatedAt)
		} else {
			vals[8] = psql.Raw("DEFAULT")
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s ServerSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s ServerSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 9)

	if s.ID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "id")...),
			psql.Arg(s.ID),
		}})
	}

	if s.Name != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "name")...),
			psql.Arg(s.Name),
		}})
	}

	if s.Description != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "description")...),
			psql.Arg(s.Description),
		}})
	}

	if s.IP != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "ip")...),
			psql.Arg(s.IP),
		}})
	}

	if s.Port != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "port")...),
			psql.Arg(s.Port),
		}})
	}

	if s.Username != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "username")...),
			psql.Arg(s.Username),
		}})
	}

	if s.PrivateKeyID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "private_key_id")...),
			psql.Arg(s.PrivateKeyID),
		}})
	}

	if s.CreatedAt != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_at")...),
			psql.Arg(s.CreatedAt),
		}})
	}

	if s.UpdatedAt != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "updated_at")...),
			psql.Arg(s.UpdatedAt),
		}})
	}

	return exprs
}

// FindServer retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindServer(ctx context.Context, exec bob.Executor, IDPK ulid.ULID, cols ...string) (*Server, error) {
	if len(cols) == 0 {
		return Servers.Query(
			SelectWhere.Servers.ID.EQ(IDPK),
		).One(ctx, exec)
	}

	return Servers.Query(
		SelectWhere.Servers.ID.EQ(IDPK),
		sm.Columns(Servers.Columns().Only(cols...)),
	).One(ctx, exec)
}

// ServerExists checks the presence of a single record by primary key
func ServerExists(ctx context.Context, exec bob.Executor, IDPK ulid.ULID) (bool, error) {
	return Servers.Query(
		SelectWhere.Servers.ID.EQ(IDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after Server is retrieved from the database
func (o *Server) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Servers.AfterSelectHooks.RunHooks(ctx, exec, ServerSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = Servers.AfterInsertHooks.RunHooks(ctx, exec, ServerSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = Servers.AfterUpdateHooks.RunHooks(ctx, exec, ServerSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = Servers.AfterDeleteHooks.RunHooks(ctx, exec, ServerSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the Server
func (o *Server) primaryKeyVals() bob.Expression {
	return psql.Arg(o.ID)
}

func (o *Server) pkEQ() dialect.Expression {
	return psql.Quote("servers", "id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the Server
func (o *Server) Update(ctx context.Context, exec bob.Executor, s *ServerSetter) error {
	v, err := Servers.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single Server record with an executor
func (o *Server) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := Servers.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the Server using the executor
func (o *Server) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Servers.Query(
		SelectWhere.Servers.ID.EQ(o.ID),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after ServerSlice is retrieved from the database
func (o ServerSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Servers.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = Servers.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = Servers.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = Servers.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o ServerSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("servers", "id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o ServerSlice) copyMatchingRows(from ...*Server) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o ServerSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Servers.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Server:
				o.copyMatchingRows(retrieved)
			case []*Server:
				o.copyMatchingRows(retrieved...)
			case ServerSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Server or a slice of Server
				// then run the AfterUpdateHooks on the slice
				_, err = Servers.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o ServerSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Servers.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Server:
				o.copyMatchingRows(retrieved)
			case []*Server:
				o.copyMatchingRows(retrieved...)
			case ServerSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Server or a slice of Server
				// then run the AfterDeleteHooks on the slice
				_, err = Servers.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o ServerSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals ServerSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Servers.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o ServerSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Servers.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o ServerSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := Servers.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type serverJoins[Q dialect.Joinable] struct {
	typ        string
	PrivateKey modAs[Q, privateKeyColumns]
}

func (j serverJoins[Q]) aliasedAs(alias string) serverJoins[Q] {
	return buildServerJoins[Q](buildServerColumns(alias), j.typ)
}

func buildServerJoins[Q dialect.Joinable](cols serverColumns, typ string) serverJoins[Q] {
	return serverJoins[Q]{
		typ: typ,
		PrivateKey: modAs[Q, privateKeyColumns]{
			c: PrivateKeyColumns,
			f: func(to privateKeyColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, PrivateKeys.Name().As(to.Alias())).On(
						to.ID.EQ(cols.PrivateKeyID),
					))
				}

				return mods
			},
		},
	}
}

// PrivateKey starts a query for related objects on private_keys
func (o *Server) PrivateKey(mods ...bob.Mod[*dialect.SelectQuery]) PrivateKeysQuery {
	return PrivateKeys.Query(append(mods,
		sm.Where(PrivateKeyColumns.ID.EQ(psql.Arg(o.PrivateKeyID))),
	)...)
}

func (os ServerSlice) PrivateKey(mods ...bob.Mod[*dialect.SelectQuery]) PrivateKeysQuery {
	pkPrivateKeyID := make(pgtypes.Array[ulid.ULID], len(os))
	for i, o := range os {
		pkPrivateKeyID[i] = o.PrivateKeyID
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkPrivateKeyID), "bytea[]")),
	))

	return PrivateKeys.Query(append(mods,
		sm.Where(psql.Group(PrivateKeyColumns.ID).OP("IN", PKArgExpr)),
	)...)
}

func (o *Server) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "PrivateKey":
		rel, ok := retrieved.(*PrivateKey)
		if !ok {
			return fmt.Errorf("server cannot load %T as %q", retrieved, name)
		}

		o.R.PrivateKey = rel

		if rel != nil {
			rel.R.Servers = ServerSlice{o}
		}
		return nil
	default:
		return fmt.Errorf("server has no relationship %q", name)
	}
}

type serverPreloader struct {
	PrivateKey func(...psql.PreloadOption) psql.Preloader
}

func buildServerPreloader() serverPreloader {
	return serverPreloader{
		PrivateKey: func(opts ...psql.PreloadOption) psql.Preloader {
			return psql.Preload[*PrivateKey, PrivateKeySlice](orm.Relationship{
				Name: "PrivateKey",
				Sides: []orm.RelSide{
					{
						From: TableNames.Servers,
						To:   TableNames.PrivateKeys,
						FromColumns: []string{
							ColumnNames.Servers.PrivateKeyID,
						},
						ToColumns: []string{
							ColumnNames.PrivateKeys.ID,
						},
					},
				},
			}, PrivateKeys.Columns().Names(), opts...)
		},
	}
}

type serverThenLoader[Q orm.Loadable] struct {
	PrivateKey func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
}

func buildServerThenLoader[Q orm.Loadable]() serverThenLoader[Q] {
	type PrivateKeyLoadInterface interface {
		LoadPrivateKey(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}

	return serverThenLoader[Q]{
		PrivateKey: thenLoadBuilder[Q](
			"PrivateKey",
			func(ctx context.Context, exec bob.Executor, retrieved PrivateKeyLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadPrivateKey(ctx, exec, mods...)
			},
		),
	}
}

// LoadPrivateKey loads the server's PrivateKey into the .R struct
func (o *Server) LoadPrivateKey(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.PrivateKey = nil

	related, err := o.PrivateKey(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.Servers = ServerSlice{o}

	o.R.PrivateKey = related
	return nil
}

// LoadPrivateKey loads the server's PrivateKey into the .R struct
func (os ServerSlice) LoadPrivateKey(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	privateKeys, err := os.PrivateKey(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range privateKeys {
			if o.PrivateKeyID != rel.ID {
				continue
			}

			rel.R.Servers = append(rel.R.Servers, o)

			o.R.PrivateKey = rel
			break
		}
	}

	return nil
}

func attachServerPrivateKey0(ctx context.Context, exec bob.Executor, count int, server0 *Server, privateKey1 *PrivateKey) (*Server, error) {
	setter := &ServerSetter{
		PrivateKeyID: &privateKey1.ID,
	}

	err := server0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachServerPrivateKey0: %w", err)
	}

	return server0, nil
}

func (server0 *Server) InsertPrivateKey(ctx context.Context, exec bob.Executor, related *PrivateKeySetter) error {
	privateKey1, err := PrivateKeys.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachServerPrivateKey0(ctx, exec, 1, server0, privateKey1)
	if err != nil {
		return err
	}

	server0.R.PrivateKey = privateKey1

	privateKey1.R.Servers = append(privateKey1.R.Servers, server0)

	return nil
}

func (server0 *Server) AttachPrivateKey(ctx context.Context, exec bob.Executor, privateKey1 *PrivateKey) error {
	var err error

	_, err = attachServerPrivateKey0(ctx, exec, 1, server0, privateKey1)
	if err != nil {
		return err
	}

	server0.R.PrivateKey = privateKey1

	privateKey1.R.Servers = append(privateKey1.R.Servers, server0)

	return nil
}
