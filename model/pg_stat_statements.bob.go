// Code generated by BobGen psql v0.0.0-20250612114253-14d7148b83cb. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/shopspring/decimal"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
)

// PGStatStatement is an object representing the database table.
type PGStatStatement struct {
	Userid               null.Val[uint32]          `db:"userid" `
	Dbid                 null.Val[uint32]          `db:"dbid" `
	Toplevel             null.Val[bool]            `db:"toplevel" `
	Queryid              null.Val[int64]           `db:"queryid" `
	Query                null.Val[string]          `db:"query" `
	Plans                null.Val[int64]           `db:"plans" `
	TotalPlanTime        null.Val[float64]         `db:"total_plan_time" `
	MinPlanTime          null.Val[float64]         `db:"min_plan_time" `
	MaxPlanTime          null.Val[float64]         `db:"max_plan_time" `
	MeanPlanTime         null.Val[float64]         `db:"mean_plan_time" `
	StddevPlanTime       null.Val[float64]         `db:"stddev_plan_time" `
	Calls                null.Val[int64]           `db:"calls" `
	TotalExecTime        null.Val[float64]         `db:"total_exec_time" `
	MinExecTime          null.Val[float64]         `db:"min_exec_time" `
	MaxExecTime          null.Val[float64]         `db:"max_exec_time" `
	MeanExecTime         null.Val[float64]         `db:"mean_exec_time" `
	StddevExecTime       null.Val[float64]         `db:"stddev_exec_time" `
	Rows                 null.Val[int64]           `db:"rows" `
	SharedBLKSHit        null.Val[int64]           `db:"shared_blks_hit" `
	SharedBLKSRead       null.Val[int64]           `db:"shared_blks_read" `
	SharedBLKSDirtied    null.Val[int64]           `db:"shared_blks_dirtied" `
	SharedBLKSWritten    null.Val[int64]           `db:"shared_blks_written" `
	LocalBLKSHit         null.Val[int64]           `db:"local_blks_hit" `
	LocalBLKSRead        null.Val[int64]           `db:"local_blks_read" `
	LocalBLKSDirtied     null.Val[int64]           `db:"local_blks_dirtied" `
	LocalBLKSWritten     null.Val[int64]           `db:"local_blks_written" `
	TempBLKSRead         null.Val[int64]           `db:"temp_blks_read" `
	TempBLKSWritten      null.Val[int64]           `db:"temp_blks_written" `
	SharedBLKReadTime    null.Val[float64]         `db:"shared_blk_read_time" `
	SharedBLKWriteTime   null.Val[float64]         `db:"shared_blk_write_time" `
	LocalBLKReadTime     null.Val[float64]         `db:"local_blk_read_time" `
	LocalBLKWriteTime    null.Val[float64]         `db:"local_blk_write_time" `
	TempBLKReadTime      null.Val[float64]         `db:"temp_blk_read_time" `
	TempBLKWriteTime     null.Val[float64]         `db:"temp_blk_write_time" `
	WalRecords           null.Val[int64]           `db:"wal_records" `
	WalFpi               null.Val[int64]           `db:"wal_fpi" `
	WalBytes             null.Val[decimal.Decimal] `db:"wal_bytes" `
	JitFunctions         null.Val[int64]           `db:"jit_functions" `
	JitGenerationTime    null.Val[float64]         `db:"jit_generation_time" `
	JitInliningCount     null.Val[int64]           `db:"jit_inlining_count" `
	JitInliningTime      null.Val[float64]         `db:"jit_inlining_time" `
	JitOptimizationCount null.Val[int64]           `db:"jit_optimization_count" `
	JitOptimizationTime  null.Val[float64]         `db:"jit_optimization_time" `
	JitEmissionCount     null.Val[int64]           `db:"jit_emission_count" `
	JitEmissionTime      null.Val[float64]         `db:"jit_emission_time" `
	JitDeformCount       null.Val[int64]           `db:"jit_deform_count" `
	JitDeformTime        null.Val[float64]         `db:"jit_deform_time" `
	StatsSince           null.Val[time.Time]       `db:"stats_since" `
	MinmaxStatsSince     null.Val[time.Time]       `db:"minmax_stats_since" `
}

// PGStatStatementSlice is an alias for a slice of pointers to PGStatStatement.
// This should almost always be used instead of []*PGStatStatement.
type PGStatStatementSlice []*PGStatStatement

// PGStatStatements contains methods to work with the pg_stat_statements view
var PGStatStatements = psql.NewViewx[*PGStatStatement, PGStatStatementSlice]("", "pg_stat_statements")

// PGStatStatementsQuery is a query on the pg_stat_statements view
type PGStatStatementsQuery = *psql.ViewQuery[*PGStatStatement, PGStatStatementSlice]

type pgStatStatementColumnNames struct {
	Userid               string
	Dbid                 string
	Toplevel             string
	Queryid              string
	Query                string
	Plans                string
	TotalPlanTime        string
	MinPlanTime          string
	MaxPlanTime          string
	MeanPlanTime         string
	StddevPlanTime       string
	Calls                string
	TotalExecTime        string
	MinExecTime          string
	MaxExecTime          string
	MeanExecTime         string
	StddevExecTime       string
	Rows                 string
	SharedBLKSHit        string
	SharedBLKSRead       string
	SharedBLKSDirtied    string
	SharedBLKSWritten    string
	LocalBLKSHit         string
	LocalBLKSRead        string
	LocalBLKSDirtied     string
	LocalBLKSWritten     string
	TempBLKSRead         string
	TempBLKSWritten      string
	SharedBLKReadTime    string
	SharedBLKWriteTime   string
	LocalBLKReadTime     string
	LocalBLKWriteTime    string
	TempBLKReadTime      string
	TempBLKWriteTime     string
	WalRecords           string
	WalFpi               string
	WalBytes             string
	JitFunctions         string
	JitGenerationTime    string
	JitInliningCount     string
	JitInliningTime      string
	JitOptimizationCount string
	JitOptimizationTime  string
	JitEmissionCount     string
	JitEmissionTime      string
	JitDeformCount       string
	JitDeformTime        string
	StatsSince           string
	MinmaxStatsSince     string
}

var PGStatStatementColumns = buildPGStatStatementColumns("pg_stat_statements")

type pgStatStatementColumns struct {
	tableAlias           string
	Userid               psql.Expression
	Dbid                 psql.Expression
	Toplevel             psql.Expression
	Queryid              psql.Expression
	Query                psql.Expression
	Plans                psql.Expression
	TotalPlanTime        psql.Expression
	MinPlanTime          psql.Expression
	MaxPlanTime          psql.Expression
	MeanPlanTime         psql.Expression
	StddevPlanTime       psql.Expression
	Calls                psql.Expression
	TotalExecTime        psql.Expression
	MinExecTime          psql.Expression
	MaxExecTime          psql.Expression
	MeanExecTime         psql.Expression
	StddevExecTime       psql.Expression
	Rows                 psql.Expression
	SharedBLKSHit        psql.Expression
	SharedBLKSRead       psql.Expression
	SharedBLKSDirtied    psql.Expression
	SharedBLKSWritten    psql.Expression
	LocalBLKSHit         psql.Expression
	LocalBLKSRead        psql.Expression
	LocalBLKSDirtied     psql.Expression
	LocalBLKSWritten     psql.Expression
	TempBLKSRead         psql.Expression
	TempBLKSWritten      psql.Expression
	SharedBLKReadTime    psql.Expression
	SharedBLKWriteTime   psql.Expression
	LocalBLKReadTime     psql.Expression
	LocalBLKWriteTime    psql.Expression
	TempBLKReadTime      psql.Expression
	TempBLKWriteTime     psql.Expression
	WalRecords           psql.Expression
	WalFpi               psql.Expression
	WalBytes             psql.Expression
	JitFunctions         psql.Expression
	JitGenerationTime    psql.Expression
	JitInliningCount     psql.Expression
	JitInliningTime      psql.Expression
	JitOptimizationCount psql.Expression
	JitOptimizationTime  psql.Expression
	JitEmissionCount     psql.Expression
	JitEmissionTime      psql.Expression
	JitDeformCount       psql.Expression
	JitDeformTime        psql.Expression
	StatsSince           psql.Expression
	MinmaxStatsSince     psql.Expression
}

func (c pgStatStatementColumns) Alias() string {
	return c.tableAlias
}

func (pgStatStatementColumns) AliasedAs(alias string) pgStatStatementColumns {
	return buildPGStatStatementColumns(alias)
}

func buildPGStatStatementColumns(alias string) pgStatStatementColumns {
	return pgStatStatementColumns{
		tableAlias:           alias,
		Userid:               psql.Quote(alias, "userid"),
		Dbid:                 psql.Quote(alias, "dbid"),
		Toplevel:             psql.Quote(alias, "toplevel"),
		Queryid:              psql.Quote(alias, "queryid"),
		Query:                psql.Quote(alias, "query"),
		Plans:                psql.Quote(alias, "plans"),
		TotalPlanTime:        psql.Quote(alias, "total_plan_time"),
		MinPlanTime:          psql.Quote(alias, "min_plan_time"),
		MaxPlanTime:          psql.Quote(alias, "max_plan_time"),
		MeanPlanTime:         psql.Quote(alias, "mean_plan_time"),
		StddevPlanTime:       psql.Quote(alias, "stddev_plan_time"),
		Calls:                psql.Quote(alias, "calls"),
		TotalExecTime:        psql.Quote(alias, "total_exec_time"),
		MinExecTime:          psql.Quote(alias, "min_exec_time"),
		MaxExecTime:          psql.Quote(alias, "max_exec_time"),
		MeanExecTime:         psql.Quote(alias, "mean_exec_time"),
		StddevExecTime:       psql.Quote(alias, "stddev_exec_time"),
		Rows:                 psql.Quote(alias, "rows"),
		SharedBLKSHit:        psql.Quote(alias, "shared_blks_hit"),
		SharedBLKSRead:       psql.Quote(alias, "shared_blks_read"),
		SharedBLKSDirtied:    psql.Quote(alias, "shared_blks_dirtied"),
		SharedBLKSWritten:    psql.Quote(alias, "shared_blks_written"),
		LocalBLKSHit:         psql.Quote(alias, "local_blks_hit"),
		LocalBLKSRead:        psql.Quote(alias, "local_blks_read"),
		LocalBLKSDirtied:     psql.Quote(alias, "local_blks_dirtied"),
		LocalBLKSWritten:     psql.Quote(alias, "local_blks_written"),
		TempBLKSRead:         psql.Quote(alias, "temp_blks_read"),
		TempBLKSWritten:      psql.Quote(alias, "temp_blks_written"),
		SharedBLKReadTime:    psql.Quote(alias, "shared_blk_read_time"),
		SharedBLKWriteTime:   psql.Quote(alias, "shared_blk_write_time"),
		LocalBLKReadTime:     psql.Quote(alias, "local_blk_read_time"),
		LocalBLKWriteTime:    psql.Quote(alias, "local_blk_write_time"),
		TempBLKReadTime:      psql.Quote(alias, "temp_blk_read_time"),
		TempBLKWriteTime:     psql.Quote(alias, "temp_blk_write_time"),
		WalRecords:           psql.Quote(alias, "wal_records"),
		WalFpi:               psql.Quote(alias, "wal_fpi"),
		WalBytes:             psql.Quote(alias, "wal_bytes"),
		JitFunctions:         psql.Quote(alias, "jit_functions"),
		JitGenerationTime:    psql.Quote(alias, "jit_generation_time"),
		JitInliningCount:     psql.Quote(alias, "jit_inlining_count"),
		JitInliningTime:      psql.Quote(alias, "jit_inlining_time"),
		JitOptimizationCount: psql.Quote(alias, "jit_optimization_count"),
		JitOptimizationTime:  psql.Quote(alias, "jit_optimization_time"),
		JitEmissionCount:     psql.Quote(alias, "jit_emission_count"),
		JitEmissionTime:      psql.Quote(alias, "jit_emission_time"),
		JitDeformCount:       psql.Quote(alias, "jit_deform_count"),
		JitDeformTime:        psql.Quote(alias, "jit_deform_time"),
		StatsSince:           psql.Quote(alias, "stats_since"),
		MinmaxStatsSince:     psql.Quote(alias, "minmax_stats_since"),
	}
}

type pgStatStatementWhere[Q psql.Filterable] struct {
	Userid               psql.WhereNullMod[Q, uint32]
	Dbid                 psql.WhereNullMod[Q, uint32]
	Toplevel             psql.WhereNullMod[Q, bool]
	Queryid              psql.WhereNullMod[Q, int64]
	Query                psql.WhereNullMod[Q, string]
	Plans                psql.WhereNullMod[Q, int64]
	TotalPlanTime        psql.WhereNullMod[Q, float64]
	MinPlanTime          psql.WhereNullMod[Q, float64]
	MaxPlanTime          psql.WhereNullMod[Q, float64]
	MeanPlanTime         psql.WhereNullMod[Q, float64]
	StddevPlanTime       psql.WhereNullMod[Q, float64]
	Calls                psql.WhereNullMod[Q, int64]
	TotalExecTime        psql.WhereNullMod[Q, float64]
	MinExecTime          psql.WhereNullMod[Q, float64]
	MaxExecTime          psql.WhereNullMod[Q, float64]
	MeanExecTime         psql.WhereNullMod[Q, float64]
	StddevExecTime       psql.WhereNullMod[Q, float64]
	Rows                 psql.WhereNullMod[Q, int64]
	SharedBLKSHit        psql.WhereNullMod[Q, int64]
	SharedBLKSRead       psql.WhereNullMod[Q, int64]
	SharedBLKSDirtied    psql.WhereNullMod[Q, int64]
	SharedBLKSWritten    psql.WhereNullMod[Q, int64]
	LocalBLKSHit         psql.WhereNullMod[Q, int64]
	LocalBLKSRead        psql.WhereNullMod[Q, int64]
	LocalBLKSDirtied     psql.WhereNullMod[Q, int64]
	LocalBLKSWritten     psql.WhereNullMod[Q, int64]
	TempBLKSRead         psql.WhereNullMod[Q, int64]
	TempBLKSWritten      psql.WhereNullMod[Q, int64]
	SharedBLKReadTime    psql.WhereNullMod[Q, float64]
	SharedBLKWriteTime   psql.WhereNullMod[Q, float64]
	LocalBLKReadTime     psql.WhereNullMod[Q, float64]
	LocalBLKWriteTime    psql.WhereNullMod[Q, float64]
	TempBLKReadTime      psql.WhereNullMod[Q, float64]
	TempBLKWriteTime     psql.WhereNullMod[Q, float64]
	WalRecords           psql.WhereNullMod[Q, int64]
	WalFpi               psql.WhereNullMod[Q, int64]
	WalBytes             psql.WhereNullMod[Q, decimal.Decimal]
	JitFunctions         psql.WhereNullMod[Q, int64]
	JitGenerationTime    psql.WhereNullMod[Q, float64]
	JitInliningCount     psql.WhereNullMod[Q, int64]
	JitInliningTime      psql.WhereNullMod[Q, float64]
	JitOptimizationCount psql.WhereNullMod[Q, int64]
	JitOptimizationTime  psql.WhereNullMod[Q, float64]
	JitEmissionCount     psql.WhereNullMod[Q, int64]
	JitEmissionTime      psql.WhereNullMod[Q, float64]
	JitDeformCount       psql.WhereNullMod[Q, int64]
	JitDeformTime        psql.WhereNullMod[Q, float64]
	StatsSince           psql.WhereNullMod[Q, time.Time]
	MinmaxStatsSince     psql.WhereNullMod[Q, time.Time]
}

func (pgStatStatementWhere[Q]) AliasedAs(alias string) pgStatStatementWhere[Q] {
	return buildPGStatStatementWhere[Q](buildPGStatStatementColumns(alias))
}

func buildPGStatStatementWhere[Q psql.Filterable](cols pgStatStatementColumns) pgStatStatementWhere[Q] {
	return pgStatStatementWhere[Q]{
		Userid:               psql.WhereNull[Q, uint32](cols.Userid),
		Dbid:                 psql.WhereNull[Q, uint32](cols.Dbid),
		Toplevel:             psql.WhereNull[Q, bool](cols.Toplevel),
		Queryid:              psql.WhereNull[Q, int64](cols.Queryid),
		Query:                psql.WhereNull[Q, string](cols.Query),
		Plans:                psql.WhereNull[Q, int64](cols.Plans),
		TotalPlanTime:        psql.WhereNull[Q, float64](cols.TotalPlanTime),
		MinPlanTime:          psql.WhereNull[Q, float64](cols.MinPlanTime),
		MaxPlanTime:          psql.WhereNull[Q, float64](cols.MaxPlanTime),
		MeanPlanTime:         psql.WhereNull[Q, float64](cols.MeanPlanTime),
		StddevPlanTime:       psql.WhereNull[Q, float64](cols.StddevPlanTime),
		Calls:                psql.WhereNull[Q, int64](cols.Calls),
		TotalExecTime:        psql.WhereNull[Q, float64](cols.TotalExecTime),
		MinExecTime:          psql.WhereNull[Q, float64](cols.MinExecTime),
		MaxExecTime:          psql.WhereNull[Q, float64](cols.MaxExecTime),
		MeanExecTime:         psql.WhereNull[Q, float64](cols.MeanExecTime),
		StddevExecTime:       psql.WhereNull[Q, float64](cols.StddevExecTime),
		Rows:                 psql.WhereNull[Q, int64](cols.Rows),
		SharedBLKSHit:        psql.WhereNull[Q, int64](cols.SharedBLKSHit),
		SharedBLKSRead:       psql.WhereNull[Q, int64](cols.SharedBLKSRead),
		SharedBLKSDirtied:    psql.WhereNull[Q, int64](cols.SharedBLKSDirtied),
		SharedBLKSWritten:    psql.WhereNull[Q, int64](cols.SharedBLKSWritten),
		LocalBLKSHit:         psql.WhereNull[Q, int64](cols.LocalBLKSHit),
		LocalBLKSRead:        psql.WhereNull[Q, int64](cols.LocalBLKSRead),
		LocalBLKSDirtied:     psql.WhereNull[Q, int64](cols.LocalBLKSDirtied),
		LocalBLKSWritten:     psql.WhereNull[Q, int64](cols.LocalBLKSWritten),
		TempBLKSRead:         psql.WhereNull[Q, int64](cols.TempBLKSRead),
		TempBLKSWritten:      psql.WhereNull[Q, int64](cols.TempBLKSWritten),
		SharedBLKReadTime:    psql.WhereNull[Q, float64](cols.SharedBLKReadTime),
		SharedBLKWriteTime:   psql.WhereNull[Q, float64](cols.SharedBLKWriteTime),
		LocalBLKReadTime:     psql.WhereNull[Q, float64](cols.LocalBLKReadTime),
		LocalBLKWriteTime:    psql.WhereNull[Q, float64](cols.LocalBLKWriteTime),
		TempBLKReadTime:      psql.WhereNull[Q, float64](cols.TempBLKReadTime),
		TempBLKWriteTime:     psql.WhereNull[Q, float64](cols.TempBLKWriteTime),
		WalRecords:           psql.WhereNull[Q, int64](cols.WalRecords),
		WalFpi:               psql.WhereNull[Q, int64](cols.WalFpi),
		WalBytes:             psql.WhereNull[Q, decimal.Decimal](cols.WalBytes),
		JitFunctions:         psql.WhereNull[Q, int64](cols.JitFunctions),
		JitGenerationTime:    psql.WhereNull[Q, float64](cols.JitGenerationTime),
		JitInliningCount:     psql.WhereNull[Q, int64](cols.JitInliningCount),
		JitInliningTime:      psql.WhereNull[Q, float64](cols.JitInliningTime),
		JitOptimizationCount: psql.WhereNull[Q, int64](cols.JitOptimizationCount),
		JitOptimizationTime:  psql.WhereNull[Q, float64](cols.JitOptimizationTime),
		JitEmissionCount:     psql.WhereNull[Q, int64](cols.JitEmissionCount),
		JitEmissionTime:      psql.WhereNull[Q, float64](cols.JitEmissionTime),
		JitDeformCount:       psql.WhereNull[Q, int64](cols.JitDeformCount),
		JitDeformTime:        psql.WhereNull[Q, float64](cols.JitDeformTime),
		StatsSince:           psql.WhereNull[Q, time.Time](cols.StatsSince),
		MinmaxStatsSince:     psql.WhereNull[Q, time.Time](cols.MinmaxStatsSince),
	}
}

// AfterQueryHook is called after PGStatStatement is retrieved from the database
func (o *PGStatStatement) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = PGStatStatements.AfterSelectHooks.RunHooks(ctx, exec, PGStatStatementSlice{o})
	}

	return err
}

// AfterQueryHook is called after PGStatStatementSlice is retrieved from the database
func (o PGStatStatementSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = PGStatStatements.AfterSelectHooks.RunHooks(ctx, exec, o)
	}

	return err
}
