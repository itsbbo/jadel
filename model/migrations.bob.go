// Code generated by BobGen psql v0.38.0. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"database/sql"
	"io"
	"time"

	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
)

// Migration is an object representing the database table.
type Migration struct {
	ID        string              `db:"id,pk" `
	AppliedAt sql.Null[time.Time] `db:"applied_at" `
}

// MigrationSlice is an alias for a slice of pointers to Migration.
// This should almost always be used instead of []*Migration.
type MigrationSlice []*Migration

// Migrations contains methods to work with the migrations table
var Migrations = psql.NewTablex[*Migration, MigrationSlice, *MigrationSetter]("", "migrations")

// MigrationsQuery is a query on the migrations table
type MigrationsQuery = *psql.ViewQuery[*Migration, MigrationSlice]

type migrationColumnNames struct {
	ID        string
	AppliedAt string
}

var MigrationColumns = buildMigrationColumns("migrations")

type migrationColumns struct {
	tableAlias string
	ID         psql.Expression
	AppliedAt  psql.Expression
}

func (c migrationColumns) Alias() string {
	return c.tableAlias
}

func (migrationColumns) AliasedAs(alias string) migrationColumns {
	return buildMigrationColumns(alias)
}

func buildMigrationColumns(alias string) migrationColumns {
	return migrationColumns{
		tableAlias: alias,
		ID:         psql.Quote(alias, "id"),
		AppliedAt:  psql.Quote(alias, "applied_at"),
	}
}

type migrationWhere[Q psql.Filterable] struct {
	ID        psql.WhereMod[Q, string]
	AppliedAt psql.WhereNullMod[Q, time.Time]
}

func (migrationWhere[Q]) AliasedAs(alias string) migrationWhere[Q] {
	return buildMigrationWhere[Q](buildMigrationColumns(alias))
}

func buildMigrationWhere[Q psql.Filterable](cols migrationColumns) migrationWhere[Q] {
	return migrationWhere[Q]{
		ID:        psql.Where[Q, string](cols.ID),
		AppliedAt: psql.WhereNull[Q, time.Time](cols.AppliedAt),
	}
}

var MigrationErrors = &migrationErrors{
	ErrUniqueMigrationsPkey: &UniqueConstraintError{
		schema:  "",
		table:   "migrations",
		columns: []string{"id"},
		s:       "migrations_pkey",
	},
}

type migrationErrors struct {
	ErrUniqueMigrationsPkey *UniqueConstraintError
}

// MigrationSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type MigrationSetter struct {
	ID        *string              `db:"id,pk" `
	AppliedAt *sql.Null[time.Time] `db:"applied_at" `
}

func (s MigrationSetter) SetColumns() []string {
	vals := make([]string, 0, 2)
	if s.ID != nil {
		vals = append(vals, "id")
	}

	if s.AppliedAt != nil {
		vals = append(vals, "applied_at")
	}

	return vals
}

func (s MigrationSetter) Overwrite(t *Migration) {
	if s.ID != nil {
		t.ID = *s.ID
	}
	if s.AppliedAt != nil {
		t.AppliedAt = *s.AppliedAt
	}
}

func (s *MigrationSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return Migrations.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 2)
		if s.ID != nil {
			vals[0] = psql.Arg(*s.ID)
		} else {
			vals[0] = psql.Raw("DEFAULT")
		}

		if s.AppliedAt != nil {
			vals[1] = psql.Arg(*s.AppliedAt)
		} else {
			vals[1] = psql.Raw("DEFAULT")
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s MigrationSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s MigrationSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 2)

	if s.ID != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "id")...),
			psql.Arg(s.ID),
		}})
	}

	if s.AppliedAt != nil {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "applied_at")...),
			psql.Arg(s.AppliedAt),
		}})
	}

	return exprs
}

// FindMigration retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindMigration(ctx context.Context, exec bob.Executor, IDPK string, cols ...string) (*Migration, error) {
	if len(cols) == 0 {
		return Migrations.Query(
			SelectWhere.Migrations.ID.EQ(IDPK),
		).One(ctx, exec)
	}

	return Migrations.Query(
		SelectWhere.Migrations.ID.EQ(IDPK),
		sm.Columns(Migrations.Columns().Only(cols...)),
	).One(ctx, exec)
}

// MigrationExists checks the presence of a single record by primary key
func MigrationExists(ctx context.Context, exec bob.Executor, IDPK string) (bool, error) {
	return Migrations.Query(
		SelectWhere.Migrations.ID.EQ(IDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after Migration is retrieved from the database
func (o *Migration) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Migrations.AfterSelectHooks.RunHooks(ctx, exec, MigrationSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = Migrations.AfterInsertHooks.RunHooks(ctx, exec, MigrationSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = Migrations.AfterUpdateHooks.RunHooks(ctx, exec, MigrationSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = Migrations.AfterDeleteHooks.RunHooks(ctx, exec, MigrationSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the Migration
func (o *Migration) primaryKeyVals() bob.Expression {
	return psql.Arg(o.ID)
}

func (o *Migration) pkEQ() dialect.Expression {
	return psql.Quote("migrations", "id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the Migration
func (o *Migration) Update(ctx context.Context, exec bob.Executor, s *MigrationSetter) error {
	v, err := Migrations.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	*o = *v

	return nil
}

// Delete deletes a single Migration record with an executor
func (o *Migration) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := Migrations.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the Migration using the executor
func (o *Migration) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Migrations.Query(
		SelectWhere.Migrations.ID.EQ(o.ID),
	).One(ctx, exec)
	if err != nil {
		return err
	}

	*o = *o2

	return nil
}

// AfterQueryHook is called after MigrationSlice is retrieved from the database
func (o MigrationSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Migrations.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = Migrations.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = Migrations.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = Migrations.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o MigrationSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("migrations", "id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o MigrationSlice) copyMatchingRows(from ...*Migration) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}

			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o MigrationSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Migrations.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Migration:
				o.copyMatchingRows(retrieved)
			case []*Migration:
				o.copyMatchingRows(retrieved...)
			case MigrationSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Migration or a slice of Migration
				// then run the AfterUpdateHooks on the slice
				_, err = Migrations.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o MigrationSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Migrations.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Migration:
				o.copyMatchingRows(retrieved)
			case []*Migration:
				o.copyMatchingRows(retrieved...)
			case MigrationSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Migration or a slice of Migration
				// then run the AfterDeleteHooks on the slice
				_, err = Migrations.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o MigrationSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals MigrationSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Migrations.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o MigrationSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Migrations.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o MigrationSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := Migrations.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}
