// Code generated by BobGen psql v0.0.0-20250612114253-14d7148b83cb. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"fmt"
	"io"
	"time"

	"github.com/aarondl/opt/null"
	"github.com/aarondl/opt/omit"
	"github.com/aarondl/opt/omitnull"
	"github.com/oklog/ulid/v2"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
	"github.com/stephenafamo/bob/types/pgtypes"
)

// PrivateKey is an object representing the database table.
type PrivateKey struct {
	ID           ulid.ULID        `db:"id,pk" json:"id"`
	Name         string           `db:"name" json:"name"`
	UserID       ulid.ULID        `db:"user_id" json:"user_id"`
	Description  null.Val[string] `db:"description" json:"description"`
	PrivateKey   string           `db:"private_key" json:"private_key"`
	IsGitRelated bool             `db:"is_git_related" json:"is_git_related"`
	CreatedAt    time.Time        `db:"created_at" json:"created_at"`
	UpdatedAt    time.Time        `db:"updated_at" json:"updated_at"`

	R privateKeyR `db:"-" json:"-"`
}

// PrivateKeySlice is an alias for a slice of pointers to PrivateKey.
// This should almost always be used instead of []*PrivateKey.
type PrivateKeySlice []*PrivateKey

// PrivateKeys contains methods to work with the private_keys table
var PrivateKeys = psql.NewTablex[*PrivateKey, PrivateKeySlice, *PrivateKeySetter]("", "private_keys")

// PrivateKeysQuery is a query on the private_keys table
type PrivateKeysQuery = *psql.ViewQuery[*PrivateKey, PrivateKeySlice]

// privateKeyR is where relationships are stored.
type privateKeyR struct {
	User    *User       `json:"User"`    // private_keys.private_keys_user_id_fkey
	Servers ServerSlice `json:"Servers"` // servers.servers_private_key_id_fkey
}

type privateKeyColumnNames struct {
	ID           string
	Name         string
	UserID       string
	Description  string
	PrivateKey   string
	IsGitRelated string
	CreatedAt    string
	UpdatedAt    string
}

var PrivateKeyColumns = buildPrivateKeyColumns("private_keys")

type privateKeyColumns struct {
	tableAlias   string
	ID           psql.Expression
	Name         psql.Expression
	UserID       psql.Expression
	Description  psql.Expression
	PrivateKey   psql.Expression
	IsGitRelated psql.Expression
	CreatedAt    psql.Expression
	UpdatedAt    psql.Expression
}

func (c privateKeyColumns) Alias() string {
	return c.tableAlias
}

func (privateKeyColumns) AliasedAs(alias string) privateKeyColumns {
	return buildPrivateKeyColumns(alias)
}

func buildPrivateKeyColumns(alias string) privateKeyColumns {
	return privateKeyColumns{
		tableAlias:   alias,
		ID:           psql.Quote(alias, "id"),
		Name:         psql.Quote(alias, "name"),
		UserID:       psql.Quote(alias, "user_id"),
		Description:  psql.Quote(alias, "description"),
		PrivateKey:   psql.Quote(alias, "private_key"),
		IsGitRelated: psql.Quote(alias, "is_git_related"),
		CreatedAt:    psql.Quote(alias, "created_at"),
		UpdatedAt:    psql.Quote(alias, "updated_at"),
	}
}

type privateKeyWhere[Q psql.Filterable] struct {
	ID           psql.WhereMod[Q, ulid.ULID]
	Name         psql.WhereMod[Q, string]
	UserID       psql.WhereMod[Q, ulid.ULID]
	Description  psql.WhereNullMod[Q, string]
	PrivateKey   psql.WhereMod[Q, string]
	IsGitRelated psql.WhereMod[Q, bool]
	CreatedAt    psql.WhereMod[Q, time.Time]
	UpdatedAt    psql.WhereMod[Q, time.Time]
}

func (privateKeyWhere[Q]) AliasedAs(alias string) privateKeyWhere[Q] {
	return buildPrivateKeyWhere[Q](buildPrivateKeyColumns(alias))
}

func buildPrivateKeyWhere[Q psql.Filterable](cols privateKeyColumns) privateKeyWhere[Q] {
	return privateKeyWhere[Q]{
		ID:           psql.Where[Q, ulid.ULID](cols.ID),
		Name:         psql.Where[Q, string](cols.Name),
		UserID:       psql.Where[Q, ulid.ULID](cols.UserID),
		Description:  psql.WhereNull[Q, string](cols.Description),
		PrivateKey:   psql.Where[Q, string](cols.PrivateKey),
		IsGitRelated: psql.Where[Q, bool](cols.IsGitRelated),
		CreatedAt:    psql.Where[Q, time.Time](cols.CreatedAt),
		UpdatedAt:    psql.Where[Q, time.Time](cols.UpdatedAt),
	}
}

var PrivateKeyErrors = &privateKeyErrors{
	ErrUniquePrivateKeysPkey: &UniqueConstraintError{
		schema:  "",
		table:   "private_keys",
		columns: []string{"id"},
		s:       "private_keys_pkey",
	},
}

type privateKeyErrors struct {
	ErrUniquePrivateKeysPkey *UniqueConstraintError
}

// PrivateKeySetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type PrivateKeySetter struct {
	ID           omit.Val[ulid.ULID]  `db:"id,pk" json:"id"`
	Name         omit.Val[string]     `db:"name" json:"name"`
	UserID       omit.Val[ulid.ULID]  `db:"user_id" json:"user_id"`
	Description  omitnull.Val[string] `db:"description" json:"description"`
	PrivateKey   omit.Val[string]     `db:"private_key" json:"private_key"`
	IsGitRelated omit.Val[bool]       `db:"is_git_related" json:"is_git_related"`
	CreatedAt    omit.Val[time.Time]  `db:"created_at" json:"created_at"`
	UpdatedAt    omit.Val[time.Time]  `db:"updated_at" json:"updated_at"`
}

func (s PrivateKeySetter) SetColumns() []string {
	vals := make([]string, 0, 8)
	if s.ID.IsSet() {
		vals = append(vals, "id")
	}
	if s.Name.IsSet() {
		vals = append(vals, "name")
	}
	if s.UserID.IsSet() {
		vals = append(vals, "user_id")
	}
	if !s.Description.IsUnset() {
		vals = append(vals, "description")
	}
	if s.PrivateKey.IsSet() {
		vals = append(vals, "private_key")
	}
	if s.IsGitRelated.IsSet() {
		vals = append(vals, "is_git_related")
	}
	if s.CreatedAt.IsSet() {
		vals = append(vals, "created_at")
	}
	if s.UpdatedAt.IsSet() {
		vals = append(vals, "updated_at")
	}
	return vals
}

func (s PrivateKeySetter) Overwrite(t *PrivateKey) {
	if s.ID.IsSet() {
		t.ID = s.ID.MustGet()
	}
	if s.Name.IsSet() {
		t.Name = s.Name.MustGet()
	}
	if s.UserID.IsSet() {
		t.UserID = s.UserID.MustGet()
	}
	if !s.Description.IsUnset() {
		t.Description = s.Description.MustGetNull()
	}
	if s.PrivateKey.IsSet() {
		t.PrivateKey = s.PrivateKey.MustGet()
	}
	if s.IsGitRelated.IsSet() {
		t.IsGitRelated = s.IsGitRelated.MustGet()
	}
	if s.CreatedAt.IsSet() {
		t.CreatedAt = s.CreatedAt.MustGet()
	}
	if s.UpdatedAt.IsSet() {
		t.UpdatedAt = s.UpdatedAt.MustGet()
	}
}

func (s *PrivateKeySetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return PrivateKeys.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 8)
		if s.ID.IsSet() {
			vals[0] = psql.Arg(s.ID.MustGet())
		} else {
			vals[0] = psql.Raw("DEFAULT")
		}

		if s.Name.IsSet() {
			vals[1] = psql.Arg(s.Name.MustGet())
		} else {
			vals[1] = psql.Raw("DEFAULT")
		}

		if s.UserID.IsSet() {
			vals[2] = psql.Arg(s.UserID.MustGet())
		} else {
			vals[2] = psql.Raw("DEFAULT")
		}

		if !s.Description.IsUnset() {
			vals[3] = psql.Arg(s.Description.MustGetNull())
		} else {
			vals[3] = psql.Raw("DEFAULT")
		}

		if s.PrivateKey.IsSet() {
			vals[4] = psql.Arg(s.PrivateKey.MustGet())
		} else {
			vals[4] = psql.Raw("DEFAULT")
		}

		if s.IsGitRelated.IsSet() {
			vals[5] = psql.Arg(s.IsGitRelated.MustGet())
		} else {
			vals[5] = psql.Raw("DEFAULT")
		}

		if s.CreatedAt.IsSet() {
			vals[6] = psql.Arg(s.CreatedAt.MustGet())
		} else {
			vals[6] = psql.Raw("DEFAULT")
		}

		if s.UpdatedAt.IsSet() {
			vals[7] = psql.Arg(s.UpdatedAt.MustGet())
		} else {
			vals[7] = psql.Raw("DEFAULT")
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s PrivateKeySetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s PrivateKeySetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 8)

	if s.ID.IsSet() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "id")...),
			psql.Arg(s.ID),
		}})
	}

	if s.Name.IsSet() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "name")...),
			psql.Arg(s.Name),
		}})
	}

	if s.UserID.IsSet() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "user_id")...),
			psql.Arg(s.UserID),
		}})
	}

	if !s.Description.IsUnset() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "description")...),
			psql.Arg(s.Description),
		}})
	}

	if s.PrivateKey.IsSet() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "private_key")...),
			psql.Arg(s.PrivateKey),
		}})
	}

	if s.IsGitRelated.IsSet() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "is_git_related")...),
			psql.Arg(s.IsGitRelated),
		}})
	}

	if s.CreatedAt.IsSet() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_at")...),
			psql.Arg(s.CreatedAt),
		}})
	}

	if s.UpdatedAt.IsSet() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "updated_at")...),
			psql.Arg(s.UpdatedAt),
		}})
	}

	return exprs
}

// FindPrivateKey retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindPrivateKey(ctx context.Context, exec bob.Executor, IDPK ulid.ULID, cols ...string) (*PrivateKey, error) {
	if len(cols) == 0 {
		return PrivateKeys.Query(
			SelectWhere.PrivateKeys.ID.EQ(IDPK),
		).One(ctx, exec)
	}

	return PrivateKeys.Query(
		SelectWhere.PrivateKeys.ID.EQ(IDPK),
		sm.Columns(PrivateKeys.Columns().Only(cols...)),
	).One(ctx, exec)
}

// PrivateKeyExists checks the presence of a single record by primary key
func PrivateKeyExists(ctx context.Context, exec bob.Executor, IDPK ulid.ULID) (bool, error) {
	return PrivateKeys.Query(
		SelectWhere.PrivateKeys.ID.EQ(IDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after PrivateKey is retrieved from the database
func (o *PrivateKey) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = PrivateKeys.AfterSelectHooks.RunHooks(ctx, exec, PrivateKeySlice{o})
	case bob.QueryTypeInsert:
		ctx, err = PrivateKeys.AfterInsertHooks.RunHooks(ctx, exec, PrivateKeySlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = PrivateKeys.AfterUpdateHooks.RunHooks(ctx, exec, PrivateKeySlice{o})
	case bob.QueryTypeDelete:
		ctx, err = PrivateKeys.AfterDeleteHooks.RunHooks(ctx, exec, PrivateKeySlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the PrivateKey
func (o *PrivateKey) primaryKeyVals() bob.Expression {
	return psql.Arg(o.ID)
}

func (o *PrivateKey) pkEQ() dialect.Expression {
	return psql.Quote("private_keys", "id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the PrivateKey
func (o *PrivateKey) Update(ctx context.Context, exec bob.Executor, s *PrivateKeySetter) error {
	v, err := PrivateKeys.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single PrivateKey record with an executor
func (o *PrivateKey) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := PrivateKeys.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the PrivateKey using the executor
func (o *PrivateKey) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := PrivateKeys.Query(
		SelectWhere.PrivateKeys.ID.EQ(o.ID),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after PrivateKeySlice is retrieved from the database
func (o PrivateKeySlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = PrivateKeys.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = PrivateKeys.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = PrivateKeys.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = PrivateKeys.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o PrivateKeySlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("private_keys", "id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o PrivateKeySlice) copyMatchingRows(from ...*PrivateKey) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o PrivateKeySlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return PrivateKeys.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *PrivateKey:
				o.copyMatchingRows(retrieved)
			case []*PrivateKey:
				o.copyMatchingRows(retrieved...)
			case PrivateKeySlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a PrivateKey or a slice of PrivateKey
				// then run the AfterUpdateHooks on the slice
				_, err = PrivateKeys.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o PrivateKeySlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return PrivateKeys.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *PrivateKey:
				o.copyMatchingRows(retrieved)
			case []*PrivateKey:
				o.copyMatchingRows(retrieved...)
			case PrivateKeySlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a PrivateKey or a slice of PrivateKey
				// then run the AfterDeleteHooks on the slice
				_, err = PrivateKeys.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o PrivateKeySlice) UpdateAll(ctx context.Context, exec bob.Executor, vals PrivateKeySetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := PrivateKeys.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o PrivateKeySlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := PrivateKeys.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o PrivateKeySlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := PrivateKeys.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type privateKeyJoins[Q dialect.Joinable] struct {
	typ     string
	User    modAs[Q, userColumns]
	Servers modAs[Q, serverColumns]
}

func (j privateKeyJoins[Q]) aliasedAs(alias string) privateKeyJoins[Q] {
	return buildPrivateKeyJoins[Q](buildPrivateKeyColumns(alias), j.typ)
}

func buildPrivateKeyJoins[Q dialect.Joinable](cols privateKeyColumns, typ string) privateKeyJoins[Q] {
	return privateKeyJoins[Q]{
		typ: typ,
		User: modAs[Q, userColumns]{
			c: UserColumns,
			f: func(to userColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Users.Name().As(to.Alias())).On(
						to.ID.EQ(cols.UserID),
					))
				}

				return mods
			},
		},
		Servers: modAs[Q, serverColumns]{
			c: ServerColumns,
			f: func(to serverColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Servers.Name().As(to.Alias())).On(
						to.PrivateKeyID.EQ(cols.ID),
					))
				}

				return mods
			},
		},
	}
}

// User starts a query for related objects on users
func (o *PrivateKey) User(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	return Users.Query(append(mods,
		sm.Where(UserColumns.ID.EQ(psql.Arg(o.UserID))),
	)...)
}

func (os PrivateKeySlice) User(mods ...bob.Mod[*dialect.SelectQuery]) UsersQuery {
	pkUserID := make(pgtypes.Array[ulid.ULID], len(os))
	for i, o := range os {
		pkUserID[i] = o.UserID
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkUserID), "bytea[]")),
	))

	return Users.Query(append(mods,
		sm.Where(psql.Group(UserColumns.ID).OP("IN", PKArgExpr)),
	)...)
}

// Servers starts a query for related objects on servers
func (o *PrivateKey) Servers(mods ...bob.Mod[*dialect.SelectQuery]) ServersQuery {
	return Servers.Query(append(mods,
		sm.Where(ServerColumns.PrivateKeyID.EQ(psql.Arg(o.ID))),
	)...)
}

func (os PrivateKeySlice) Servers(mods ...bob.Mod[*dialect.SelectQuery]) ServersQuery {
	pkID := make(pgtypes.Array[ulid.ULID], len(os))
	for i, o := range os {
		pkID[i] = o.ID
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkID), "bytea[]")),
	))

	return Servers.Query(append(mods,
		sm.Where(psql.Group(ServerColumns.PrivateKeyID).OP("IN", PKArgExpr)),
	)...)
}

func (o *PrivateKey) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "User":
		rel, ok := retrieved.(*User)
		if !ok {
			return fmt.Errorf("privateKey cannot load %T as %q", retrieved, name)
		}

		o.R.User = rel

		if rel != nil {
			rel.R.PrivateKeys = PrivateKeySlice{o}
		}
		return nil
	case "Servers":
		rels, ok := retrieved.(ServerSlice)
		if !ok {
			return fmt.Errorf("privateKey cannot load %T as %q", retrieved, name)
		}

		o.R.Servers = rels

		for _, rel := range rels {
			if rel != nil {
				rel.R.PrivateKey = o
			}
		}
		return nil
	default:
		return fmt.Errorf("privateKey has no relationship %q", name)
	}
}

type privateKeyPreloader struct {
	User func(...psql.PreloadOption) psql.Preloader
}

func buildPrivateKeyPreloader() privateKeyPreloader {
	return privateKeyPreloader{
		User: func(opts ...psql.PreloadOption) psql.Preloader {
			return psql.Preload[*User, UserSlice](orm.Relationship{
				Name: "User",
				Sides: []orm.RelSide{
					{
						From: TableNames.PrivateKeys,
						To:   TableNames.Users,
						FromColumns: []string{
							ColumnNames.PrivateKeys.UserID,
						},
						ToColumns: []string{
							ColumnNames.Users.ID,
						},
					},
				},
			}, Users.Columns().Names(), opts...)
		},
	}
}

type privateKeyThenLoader[Q orm.Loadable] struct {
	User    func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
	Servers func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
}

func buildPrivateKeyThenLoader[Q orm.Loadable]() privateKeyThenLoader[Q] {
	type UserLoadInterface interface {
		LoadUser(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}
	type ServersLoadInterface interface {
		LoadServers(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}

	return privateKeyThenLoader[Q]{
		User: thenLoadBuilder[Q](
			"User",
			func(ctx context.Context, exec bob.Executor, retrieved UserLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadUser(ctx, exec, mods...)
			},
		),
		Servers: thenLoadBuilder[Q](
			"Servers",
			func(ctx context.Context, exec bob.Executor, retrieved ServersLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadServers(ctx, exec, mods...)
			},
		),
	}
}

// LoadUser loads the privateKey's User into the .R struct
func (o *PrivateKey) LoadUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.User = nil

	related, err := o.User(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.PrivateKeys = PrivateKeySlice{o}

	o.R.User = related
	return nil
}

// LoadUser loads the privateKey's User into the .R struct
func (os PrivateKeySlice) LoadUser(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	users, err := os.User(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range users {
			if o.UserID != rel.ID {
				continue
			}

			rel.R.PrivateKeys = append(rel.R.PrivateKeys, o)

			o.R.User = rel
			break
		}
	}

	return nil
}

// LoadServers loads the privateKey's Servers into the .R struct
func (o *PrivateKey) LoadServers(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Servers = nil

	related, err := o.Servers(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, rel := range related {
		rel.R.PrivateKey = o
	}

	o.R.Servers = related
	return nil
}

// LoadServers loads the privateKey's Servers into the .R struct
func (os PrivateKeySlice) LoadServers(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	servers, err := os.Servers(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		o.R.Servers = nil
	}

	for _, o := range os {
		for _, rel := range servers {
			if o.ID != rel.PrivateKeyID {
				continue
			}

			rel.R.PrivateKey = o

			o.R.Servers = append(o.R.Servers, rel)
		}
	}

	return nil
}

func attachPrivateKeyUser0(ctx context.Context, exec bob.Executor, count int, privateKey0 *PrivateKey, user1 *User) (*PrivateKey, error) {
	setter := &PrivateKeySetter{
		UserID: omit.From(user1.ID),
	}

	err := privateKey0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachPrivateKeyUser0: %w", err)
	}

	return privateKey0, nil
}

func (privateKey0 *PrivateKey) InsertUser(ctx context.Context, exec bob.Executor, related *UserSetter) error {
	user1, err := Users.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachPrivateKeyUser0(ctx, exec, 1, privateKey0, user1)
	if err != nil {
		return err
	}

	privateKey0.R.User = user1

	user1.R.PrivateKeys = append(user1.R.PrivateKeys, privateKey0)

	return nil
}

func (privateKey0 *PrivateKey) AttachUser(ctx context.Context, exec bob.Executor, user1 *User) error {
	var err error

	_, err = attachPrivateKeyUser0(ctx, exec, 1, privateKey0, user1)
	if err != nil {
		return err
	}

	privateKey0.R.User = user1

	user1.R.PrivateKeys = append(user1.R.PrivateKeys, privateKey0)

	return nil
}

func insertPrivateKeyServers0(ctx context.Context, exec bob.Executor, servers1 []*ServerSetter, privateKey0 *PrivateKey) (ServerSlice, error) {
	for i := range servers1 {
		servers1[i].PrivateKeyID = omit.From(privateKey0.ID)
	}

	ret, err := Servers.Insert(bob.ToMods(servers1...)).All(ctx, exec)
	if err != nil {
		return ret, fmt.Errorf("insertPrivateKeyServers0: %w", err)
	}

	return ret, nil
}

func attachPrivateKeyServers0(ctx context.Context, exec bob.Executor, count int, servers1 ServerSlice, privateKey0 *PrivateKey) (ServerSlice, error) {
	setter := &ServerSetter{
		PrivateKeyID: omit.From(privateKey0.ID),
	}

	err := servers1.UpdateAll(ctx, exec, *setter)
	if err != nil {
		return nil, fmt.Errorf("attachPrivateKeyServers0: %w", err)
	}

	return servers1, nil
}

func (privateKey0 *PrivateKey) InsertServers(ctx context.Context, exec bob.Executor, related ...*ServerSetter) error {
	if len(related) == 0 {
		return nil
	}

	var err error

	servers1, err := insertPrivateKeyServers0(ctx, exec, related, privateKey0)
	if err != nil {
		return err
	}

	privateKey0.R.Servers = append(privateKey0.R.Servers, servers1...)

	for _, rel := range servers1 {
		rel.R.PrivateKey = privateKey0
	}
	return nil
}

func (privateKey0 *PrivateKey) AttachServers(ctx context.Context, exec bob.Executor, related ...*Server) error {
	if len(related) == 0 {
		return nil
	}

	var err error
	servers1 := ServerSlice(related)

	_, err = attachPrivateKeyServers0(ctx, exec, len(related), servers1, privateKey0)
	if err != nil {
		return err
	}

	privateKey0.R.Servers = append(privateKey0.R.Servers, servers1...)

	for _, rel := range related {
		rel.R.PrivateKey = privateKey0
	}

	return nil
}
