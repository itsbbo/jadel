// Code generated by BobGen psql v0.0.0-20250612114253-14d7148b83cb. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"fmt"
	"io"
	"time"

	"github.com/aarondl/opt/omit"
	"github.com/oklog/ulid/v2"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
	"github.com/stephenafamo/bob/mods"
	"github.com/stephenafamo/bob/orm"
	"github.com/stephenafamo/bob/types/pgtypes"
)

// Environment is an object representing the database table.
type Environment struct {
	ID        ulid.ULID `db:"id,pk" json:"id"`
	Name      string    `db:"name" json:"name"`
	ProjectID ulid.ULID `db:"project_id" json:"project_id"`
	CreatedAt time.Time `db:"created_at" json:"created_at"`
	UpdatedAt time.Time `db:"updated_at" json:"updated_at"`

	R environmentR `db:"-" json:"-"`
}

// EnvironmentSlice is an alias for a slice of pointers to Environment.
// This should almost always be used instead of []*Environment.
type EnvironmentSlice []*Environment

// Environments contains methods to work with the environments table
var Environments = psql.NewTablex[*Environment, EnvironmentSlice, *EnvironmentSetter]("", "environments")

// EnvironmentsQuery is a query on the environments table
type EnvironmentsQuery = *psql.ViewQuery[*Environment, EnvironmentSlice]

// environmentR is where relationships are stored.
type environmentR struct {
	Project *Project `json:"Project"` // environments.environments_project_id_fkey
}

type environmentColumnNames struct {
	ID        string
	Name      string
	ProjectID string
	CreatedAt string
	UpdatedAt string
}

var EnvironmentColumns = buildEnvironmentColumns("environments")

type environmentColumns struct {
	tableAlias string
	ID         psql.Expression
	Name       psql.Expression
	ProjectID  psql.Expression
	CreatedAt  psql.Expression
	UpdatedAt  psql.Expression
}

func (c environmentColumns) Alias() string {
	return c.tableAlias
}

func (environmentColumns) AliasedAs(alias string) environmentColumns {
	return buildEnvironmentColumns(alias)
}

func buildEnvironmentColumns(alias string) environmentColumns {
	return environmentColumns{
		tableAlias: alias,
		ID:         psql.Quote(alias, "id"),
		Name:       psql.Quote(alias, "name"),
		ProjectID:  psql.Quote(alias, "project_id"),
		CreatedAt:  psql.Quote(alias, "created_at"),
		UpdatedAt:  psql.Quote(alias, "updated_at"),
	}
}

type environmentWhere[Q psql.Filterable] struct {
	ID        psql.WhereMod[Q, ulid.ULID]
	Name      psql.WhereMod[Q, string]
	ProjectID psql.WhereMod[Q, ulid.ULID]
	CreatedAt psql.WhereMod[Q, time.Time]
	UpdatedAt psql.WhereMod[Q, time.Time]
}

func (environmentWhere[Q]) AliasedAs(alias string) environmentWhere[Q] {
	return buildEnvironmentWhere[Q](buildEnvironmentColumns(alias))
}

func buildEnvironmentWhere[Q psql.Filterable](cols environmentColumns) environmentWhere[Q] {
	return environmentWhere[Q]{
		ID:        psql.Where[Q, ulid.ULID](cols.ID),
		Name:      psql.Where[Q, string](cols.Name),
		ProjectID: psql.Where[Q, ulid.ULID](cols.ProjectID),
		CreatedAt: psql.Where[Q, time.Time](cols.CreatedAt),
		UpdatedAt: psql.Where[Q, time.Time](cols.UpdatedAt),
	}
}

var EnvironmentErrors = &environmentErrors{
	ErrUniqueEnvironmentsPkey: &UniqueConstraintError{
		schema:  "",
		table:   "environments",
		columns: []string{"id"},
		s:       "environments_pkey",
	},
}

type environmentErrors struct {
	ErrUniqueEnvironmentsPkey *UniqueConstraintError
}

// EnvironmentSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type EnvironmentSetter struct {
	ID        omit.Val[ulid.ULID] `db:"id,pk" json:"id"`
	Name      omit.Val[string]    `db:"name" json:"name"`
	ProjectID omit.Val[ulid.ULID] `db:"project_id" json:"project_id"`
	CreatedAt omit.Val[time.Time] `db:"created_at" json:"created_at"`
	UpdatedAt omit.Val[time.Time] `db:"updated_at" json:"updated_at"`
}

func (s EnvironmentSetter) SetColumns() []string {
	vals := make([]string, 0, 5)
	if s.ID.IsSet() {
		vals = append(vals, "id")
	}
	if s.Name.IsSet() {
		vals = append(vals, "name")
	}
	if s.ProjectID.IsSet() {
		vals = append(vals, "project_id")
	}
	if s.CreatedAt.IsSet() {
		vals = append(vals, "created_at")
	}
	if s.UpdatedAt.IsSet() {
		vals = append(vals, "updated_at")
	}
	return vals
}

func (s EnvironmentSetter) Overwrite(t *Environment) {
	if s.ID.IsSet() {
		t.ID = s.ID.MustGet()
	}
	if s.Name.IsSet() {
		t.Name = s.Name.MustGet()
	}
	if s.ProjectID.IsSet() {
		t.ProjectID = s.ProjectID.MustGet()
	}
	if s.CreatedAt.IsSet() {
		t.CreatedAt = s.CreatedAt.MustGet()
	}
	if s.UpdatedAt.IsSet() {
		t.UpdatedAt = s.UpdatedAt.MustGet()
	}
}

func (s *EnvironmentSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return Environments.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 5)
		if s.ID.IsSet() {
			vals[0] = psql.Arg(s.ID.MustGet())
		} else {
			vals[0] = psql.Raw("DEFAULT")
		}

		if s.Name.IsSet() {
			vals[1] = psql.Arg(s.Name.MustGet())
		} else {
			vals[1] = psql.Raw("DEFAULT")
		}

		if s.ProjectID.IsSet() {
			vals[2] = psql.Arg(s.ProjectID.MustGet())
		} else {
			vals[2] = psql.Raw("DEFAULT")
		}

		if s.CreatedAt.IsSet() {
			vals[3] = psql.Arg(s.CreatedAt.MustGet())
		} else {
			vals[3] = psql.Raw("DEFAULT")
		}

		if s.UpdatedAt.IsSet() {
			vals[4] = psql.Arg(s.UpdatedAt.MustGet())
		} else {
			vals[4] = psql.Raw("DEFAULT")
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s EnvironmentSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s EnvironmentSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 5)

	if s.ID.IsSet() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "id")...),
			psql.Arg(s.ID),
		}})
	}

	if s.Name.IsSet() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "name")...),
			psql.Arg(s.Name),
		}})
	}

	if s.ProjectID.IsSet() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "project_id")...),
			psql.Arg(s.ProjectID),
		}})
	}

	if s.CreatedAt.IsSet() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "created_at")...),
			psql.Arg(s.CreatedAt),
		}})
	}

	if s.UpdatedAt.IsSet() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "updated_at")...),
			psql.Arg(s.UpdatedAt),
		}})
	}

	return exprs
}

// FindEnvironment retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindEnvironment(ctx context.Context, exec bob.Executor, IDPK ulid.ULID, cols ...string) (*Environment, error) {
	if len(cols) == 0 {
		return Environments.Query(
			SelectWhere.Environments.ID.EQ(IDPK),
		).One(ctx, exec)
	}

	return Environments.Query(
		SelectWhere.Environments.ID.EQ(IDPK),
		sm.Columns(Environments.Columns().Only(cols...)),
	).One(ctx, exec)
}

// EnvironmentExists checks the presence of a single record by primary key
func EnvironmentExists(ctx context.Context, exec bob.Executor, IDPK ulid.ULID) (bool, error) {
	return Environments.Query(
		SelectWhere.Environments.ID.EQ(IDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after Environment is retrieved from the database
func (o *Environment) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Environments.AfterSelectHooks.RunHooks(ctx, exec, EnvironmentSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = Environments.AfterInsertHooks.RunHooks(ctx, exec, EnvironmentSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = Environments.AfterUpdateHooks.RunHooks(ctx, exec, EnvironmentSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = Environments.AfterDeleteHooks.RunHooks(ctx, exec, EnvironmentSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the Environment
func (o *Environment) primaryKeyVals() bob.Expression {
	return psql.Arg(o.ID)
}

func (o *Environment) pkEQ() dialect.Expression {
	return psql.Quote("environments", "id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the Environment
func (o *Environment) Update(ctx context.Context, exec bob.Executor, s *EnvironmentSetter) error {
	v, err := Environments.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	o.R = v.R
	*o = *v

	return nil
}

// Delete deletes a single Environment record with an executor
func (o *Environment) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := Environments.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the Environment using the executor
func (o *Environment) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Environments.Query(
		SelectWhere.Environments.ID.EQ(o.ID),
	).One(ctx, exec)
	if err != nil {
		return err
	}
	o2.R = o.R
	*o = *o2

	return nil
}

// AfterQueryHook is called after EnvironmentSlice is retrieved from the database
func (o EnvironmentSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Environments.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = Environments.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = Environments.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = Environments.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o EnvironmentSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("environments", "id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o EnvironmentSlice) copyMatchingRows(from ...*Environment) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}
			new.R = old.R
			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o EnvironmentSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Environments.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Environment:
				o.copyMatchingRows(retrieved)
			case []*Environment:
				o.copyMatchingRows(retrieved...)
			case EnvironmentSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Environment or a slice of Environment
				// then run the AfterUpdateHooks on the slice
				_, err = Environments.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o EnvironmentSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Environments.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Environment:
				o.copyMatchingRows(retrieved)
			case []*Environment:
				o.copyMatchingRows(retrieved...)
			case EnvironmentSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Environment or a slice of Environment
				// then run the AfterDeleteHooks on the slice
				_, err = Environments.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o EnvironmentSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals EnvironmentSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Environments.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o EnvironmentSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Environments.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o EnvironmentSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := Environments.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}

type environmentJoins[Q dialect.Joinable] struct {
	typ     string
	Project modAs[Q, projectColumns]
}

func (j environmentJoins[Q]) aliasedAs(alias string) environmentJoins[Q] {
	return buildEnvironmentJoins[Q](buildEnvironmentColumns(alias), j.typ)
}

func buildEnvironmentJoins[Q dialect.Joinable](cols environmentColumns, typ string) environmentJoins[Q] {
	return environmentJoins[Q]{
		typ: typ,
		Project: modAs[Q, projectColumns]{
			c: ProjectColumns,
			f: func(to projectColumns) bob.Mod[Q] {
				mods := make(mods.QueryMods[Q], 0, 1)

				{
					mods = append(mods, dialect.Join[Q](typ, Projects.Name().As(to.Alias())).On(
						to.ID.EQ(cols.ProjectID),
					))
				}

				return mods
			},
		},
	}
}

// Project starts a query for related objects on projects
func (o *Environment) Project(mods ...bob.Mod[*dialect.SelectQuery]) ProjectsQuery {
	return Projects.Query(append(mods,
		sm.Where(ProjectColumns.ID.EQ(psql.Arg(o.ProjectID))),
	)...)
}

func (os EnvironmentSlice) Project(mods ...bob.Mod[*dialect.SelectQuery]) ProjectsQuery {
	pkProjectID := make(pgtypes.Array[ulid.ULID], len(os))
	for i, o := range os {
		pkProjectID[i] = o.ProjectID
	}
	PKArgExpr := psql.Select(sm.Columns(
		psql.F("unnest", psql.Cast(psql.Arg(pkProjectID), "bytea[]")),
	))

	return Projects.Query(append(mods,
		sm.Where(psql.Group(ProjectColumns.ID).OP("IN", PKArgExpr)),
	)...)
}

func (o *Environment) Preload(name string, retrieved any) error {
	if o == nil {
		return nil
	}

	switch name {
	case "Project":
		rel, ok := retrieved.(*Project)
		if !ok {
			return fmt.Errorf("environment cannot load %T as %q", retrieved, name)
		}

		o.R.Project = rel

		if rel != nil {
			rel.R.Environments = EnvironmentSlice{o}
		}
		return nil
	default:
		return fmt.Errorf("environment has no relationship %q", name)
	}
}

type environmentPreloader struct {
	Project func(...psql.PreloadOption) psql.Preloader
}

func buildEnvironmentPreloader() environmentPreloader {
	return environmentPreloader{
		Project: func(opts ...psql.PreloadOption) psql.Preloader {
			return psql.Preload[*Project, ProjectSlice](orm.Relationship{
				Name: "Project",
				Sides: []orm.RelSide{
					{
						From: TableNames.Environments,
						To:   TableNames.Projects,
						FromColumns: []string{
							ColumnNames.Environments.ProjectID,
						},
						ToColumns: []string{
							ColumnNames.Projects.ID,
						},
					},
				},
			}, Projects.Columns().Names(), opts...)
		},
	}
}

type environmentThenLoader[Q orm.Loadable] struct {
	Project func(...bob.Mod[*dialect.SelectQuery]) orm.Loader[Q]
}

func buildEnvironmentThenLoader[Q orm.Loadable]() environmentThenLoader[Q] {
	type ProjectLoadInterface interface {
		LoadProject(context.Context, bob.Executor, ...bob.Mod[*dialect.SelectQuery]) error
	}

	return environmentThenLoader[Q]{
		Project: thenLoadBuilder[Q](
			"Project",
			func(ctx context.Context, exec bob.Executor, retrieved ProjectLoadInterface, mods ...bob.Mod[*dialect.SelectQuery]) error {
				return retrieved.LoadProject(ctx, exec, mods...)
			},
		),
	}
}

// LoadProject loads the environment's Project into the .R struct
func (o *Environment) LoadProject(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if o == nil {
		return nil
	}

	// Reset the relationship
	o.R.Project = nil

	related, err := o.Project(mods...).One(ctx, exec)
	if err != nil {
		return err
	}

	related.R.Environments = EnvironmentSlice{o}

	o.R.Project = related
	return nil
}

// LoadProject loads the environment's Project into the .R struct
func (os EnvironmentSlice) LoadProject(ctx context.Context, exec bob.Executor, mods ...bob.Mod[*dialect.SelectQuery]) error {
	if len(os) == 0 {
		return nil
	}

	projects, err := os.Project(mods...).All(ctx, exec)
	if err != nil {
		return err
	}

	for _, o := range os {
		for _, rel := range projects {
			if o.ProjectID != rel.ID {
				continue
			}

			rel.R.Environments = append(rel.R.Environments, o)

			o.R.Project = rel
			break
		}
	}

	return nil
}

func attachEnvironmentProject0(ctx context.Context, exec bob.Executor, count int, environment0 *Environment, project1 *Project) (*Environment, error) {
	setter := &EnvironmentSetter{
		ProjectID: omit.From(project1.ID),
	}

	err := environment0.Update(ctx, exec, setter)
	if err != nil {
		return nil, fmt.Errorf("attachEnvironmentProject0: %w", err)
	}

	return environment0, nil
}

func (environment0 *Environment) InsertProject(ctx context.Context, exec bob.Executor, related *ProjectSetter) error {
	project1, err := Projects.Insert(related).One(ctx, exec)
	if err != nil {
		return fmt.Errorf("inserting related objects: %w", err)
	}

	_, err = attachEnvironmentProject0(ctx, exec, 1, environment0, project1)
	if err != nil {
		return err
	}

	environment0.R.Project = project1

	project1.R.Environments = append(project1.R.Environments, environment0)

	return nil
}

func (environment0 *Environment) AttachProject(ctx context.Context, exec bob.Executor, project1 *Project) error {
	var err error

	_, err = attachEnvironmentProject0(ctx, exec, 1, environment0, project1)
	if err != nil {
		return err
	}

	environment0.R.Project = project1

	project1.R.Environments = append(project1.R.Environments, environment0)

	return nil
}
