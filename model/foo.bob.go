// Code generated by BobGen psql v0.0.0-20250612114253-14d7148b83cb. DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package model

import (
	"context"
	"io"

	"github.com/aarondl/opt/omit"
	"github.com/stephenafamo/bob"
	"github.com/stephenafamo/bob/dialect/psql"
	"github.com/stephenafamo/bob/dialect/psql/dialect"
	"github.com/stephenafamo/bob/dialect/psql/dm"
	"github.com/stephenafamo/bob/dialect/psql/sm"
	"github.com/stephenafamo/bob/dialect/psql/um"
	"github.com/stephenafamo/bob/expr"
)

// Foo is an object representing the database table.
type Foo struct {
	ID   int32  `db:"id,pk" json:"id"`
	Name string `db:"name" json:"name"`
}

// FooSlice is an alias for a slice of pointers to Foo.
// This should almost always be used instead of []*Foo.
type FooSlice []*Foo

// Foos contains methods to work with the foo table
var Foos = psql.NewTablex[*Foo, FooSlice, *FooSetter]("", "foo")

// FoosQuery is a query on the foo table
type FoosQuery = *psql.ViewQuery[*Foo, FooSlice]

type fooColumnNames struct {
	ID   string
	Name string
}

var FooColumns = buildFooColumns("foo")

type fooColumns struct {
	tableAlias string
	ID         psql.Expression
	Name       psql.Expression
}

func (c fooColumns) Alias() string {
	return c.tableAlias
}

func (fooColumns) AliasedAs(alias string) fooColumns {
	return buildFooColumns(alias)
}

func buildFooColumns(alias string) fooColumns {
	return fooColumns{
		tableAlias: alias,
		ID:         psql.Quote(alias, "id"),
		Name:       psql.Quote(alias, "name"),
	}
}

type fooWhere[Q psql.Filterable] struct {
	ID   psql.WhereMod[Q, int32]
	Name psql.WhereMod[Q, string]
}

func (fooWhere[Q]) AliasedAs(alias string) fooWhere[Q] {
	return buildFooWhere[Q](buildFooColumns(alias))
}

func buildFooWhere[Q psql.Filterable](cols fooColumns) fooWhere[Q] {
	return fooWhere[Q]{
		ID:   psql.Where[Q, int32](cols.ID),
		Name: psql.Where[Q, string](cols.Name),
	}
}

var FooErrors = &fooErrors{
	ErrUniqueFooPkey: &UniqueConstraintError{
		schema:  "",
		table:   "foo",
		columns: []string{"id"},
		s:       "foo_pkey",
	},
}

type fooErrors struct {
	ErrUniqueFooPkey *UniqueConstraintError
}

// FooSetter is used for insert/upsert/update operations
// All values are optional, and do not have to be set
// Generated columns are not included
type FooSetter struct {
	ID   omit.Val[int32]  `db:"id,pk" json:"id"`
	Name omit.Val[string] `db:"name" json:"name"`
}

func (s FooSetter) SetColumns() []string {
	vals := make([]string, 0, 2)
	if s.ID.IsSet() {
		vals = append(vals, "id")
	}
	if s.Name.IsSet() {
		vals = append(vals, "name")
	}
	return vals
}

func (s FooSetter) Overwrite(t *Foo) {
	if s.ID.IsSet() {
		t.ID = s.ID.MustGet()
	}
	if s.Name.IsSet() {
		t.Name = s.Name.MustGet()
	}
}

func (s *FooSetter) Apply(q *dialect.InsertQuery) {
	q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
		return Foos.BeforeInsertHooks.RunHooks(ctx, exec, s)
	})

	q.AppendValues(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		vals := make([]bob.Expression, 2)
		if s.ID.IsSet() {
			vals[0] = psql.Arg(s.ID.MustGet())
		} else {
			vals[0] = psql.Raw("DEFAULT")
		}

		if s.Name.IsSet() {
			vals[1] = psql.Arg(s.Name.MustGet())
		} else {
			vals[1] = psql.Raw("DEFAULT")
		}

		return bob.ExpressSlice(ctx, w, d, start, vals, "", ", ", "")
	}))
}

func (s FooSetter) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return um.Set(s.Expressions()...)
}

func (s FooSetter) Expressions(prefix ...string) []bob.Expression {
	exprs := make([]bob.Expression, 0, 2)

	if s.ID.IsSet() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "id")...),
			psql.Arg(s.ID),
		}})
	}

	if s.Name.IsSet() {
		exprs = append(exprs, expr.Join{Sep: " = ", Exprs: []bob.Expression{
			psql.Quote(append(prefix, "name")...),
			psql.Arg(s.Name),
		}})
	}

	return exprs
}

// FindFoo retrieves a single record by primary key
// If cols is empty Find will return all columns.
func FindFoo(ctx context.Context, exec bob.Executor, IDPK int32, cols ...string) (*Foo, error) {
	if len(cols) == 0 {
		return Foos.Query(
			SelectWhere.Foos.ID.EQ(IDPK),
		).One(ctx, exec)
	}

	return Foos.Query(
		SelectWhere.Foos.ID.EQ(IDPK),
		sm.Columns(Foos.Columns().Only(cols...)),
	).One(ctx, exec)
}

// FooExists checks the presence of a single record by primary key
func FooExists(ctx context.Context, exec bob.Executor, IDPK int32) (bool, error) {
	return Foos.Query(
		SelectWhere.Foos.ID.EQ(IDPK),
	).Exists(ctx, exec)
}

// AfterQueryHook is called after Foo is retrieved from the database
func (o *Foo) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Foos.AfterSelectHooks.RunHooks(ctx, exec, FooSlice{o})
	case bob.QueryTypeInsert:
		ctx, err = Foos.AfterInsertHooks.RunHooks(ctx, exec, FooSlice{o})
	case bob.QueryTypeUpdate:
		ctx, err = Foos.AfterUpdateHooks.RunHooks(ctx, exec, FooSlice{o})
	case bob.QueryTypeDelete:
		ctx, err = Foos.AfterDeleteHooks.RunHooks(ctx, exec, FooSlice{o})
	}

	return err
}

// primaryKeyVals returns the primary key values of the Foo
func (o *Foo) primaryKeyVals() bob.Expression {
	return psql.Arg(o.ID)
}

func (o *Foo) pkEQ() dialect.Expression {
	return psql.Quote("foo", "id").EQ(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		return o.primaryKeyVals().WriteSQL(ctx, w, d, start)
	}))
}

// Update uses an executor to update the Foo
func (o *Foo) Update(ctx context.Context, exec bob.Executor, s *FooSetter) error {
	v, err := Foos.Update(s.UpdateMod(), um.Where(o.pkEQ())).One(ctx, exec)
	if err != nil {
		return err
	}

	*o = *v

	return nil
}

// Delete deletes a single Foo record with an executor
func (o *Foo) Delete(ctx context.Context, exec bob.Executor) error {
	_, err := Foos.Delete(dm.Where(o.pkEQ())).Exec(ctx, exec)
	return err
}

// Reload refreshes the Foo using the executor
func (o *Foo) Reload(ctx context.Context, exec bob.Executor) error {
	o2, err := Foos.Query(
		SelectWhere.Foos.ID.EQ(o.ID),
	).One(ctx, exec)
	if err != nil {
		return err
	}

	*o = *o2

	return nil
}

// AfterQueryHook is called after FooSlice is retrieved from the database
func (o FooSlice) AfterQueryHook(ctx context.Context, exec bob.Executor, queryType bob.QueryType) error {
	var err error

	switch queryType {
	case bob.QueryTypeSelect:
		ctx, err = Foos.AfterSelectHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeInsert:
		ctx, err = Foos.AfterInsertHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeUpdate:
		ctx, err = Foos.AfterUpdateHooks.RunHooks(ctx, exec, o)
	case bob.QueryTypeDelete:
		ctx, err = Foos.AfterDeleteHooks.RunHooks(ctx, exec, o)
	}

	return err
}

func (o FooSlice) pkIN() dialect.Expression {
	if len(o) == 0 {
		return psql.Raw("NULL")
	}

	return psql.Quote("foo", "id").In(bob.ExpressionFunc(func(ctx context.Context, w io.Writer, d bob.Dialect, start int) ([]any, error) {
		pkPairs := make([]bob.Expression, len(o))
		for i, row := range o {
			pkPairs[i] = row.primaryKeyVals()
		}
		return bob.ExpressSlice(ctx, w, d, start, pkPairs, "", ", ", "")
	}))
}

// copyMatchingRows finds models in the given slice that have the same primary key
// then it first copies the existing relationships from the old model to the new model
// and then replaces the old model in the slice with the new model
func (o FooSlice) copyMatchingRows(from ...*Foo) {
	for i, old := range o {
		for _, new := range from {
			if new.ID != old.ID {
				continue
			}

			o[i] = new
			break
		}
	}
}

// UpdateMod modifies an update query with "WHERE primary_key IN (o...)"
func (o FooSlice) UpdateMod() bob.Mod[*dialect.UpdateQuery] {
	return bob.ModFunc[*dialect.UpdateQuery](func(q *dialect.UpdateQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Foos.BeforeUpdateHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Foo:
				o.copyMatchingRows(retrieved)
			case []*Foo:
				o.copyMatchingRows(retrieved...)
			case FooSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Foo or a slice of Foo
				// then run the AfterUpdateHooks on the slice
				_, err = Foos.AfterUpdateHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

// DeleteMod modifies an delete query with "WHERE primary_key IN (o...)"
func (o FooSlice) DeleteMod() bob.Mod[*dialect.DeleteQuery] {
	return bob.ModFunc[*dialect.DeleteQuery](func(q *dialect.DeleteQuery) {
		q.AppendHooks(func(ctx context.Context, exec bob.Executor) (context.Context, error) {
			return Foos.BeforeDeleteHooks.RunHooks(ctx, exec, o)
		})

		q.AppendLoader(bob.LoaderFunc(func(ctx context.Context, exec bob.Executor, retrieved any) error {
			var err error
			switch retrieved := retrieved.(type) {
			case *Foo:
				o.copyMatchingRows(retrieved)
			case []*Foo:
				o.copyMatchingRows(retrieved...)
			case FooSlice:
				o.copyMatchingRows(retrieved...)
			default:
				// If the retrieved value is not a Foo or a slice of Foo
				// then run the AfterDeleteHooks on the slice
				_, err = Foos.AfterDeleteHooks.RunHooks(ctx, exec, o)
			}

			return err
		}))

		q.AppendWhere(o.pkIN())
	})
}

func (o FooSlice) UpdateAll(ctx context.Context, exec bob.Executor, vals FooSetter) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Foos.Update(vals.UpdateMod(), o.UpdateMod()).All(ctx, exec)
	return err
}

func (o FooSlice) DeleteAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	_, err := Foos.Delete(o.DeleteMod()).Exec(ctx, exec)
	return err
}

func (o FooSlice) ReloadAll(ctx context.Context, exec bob.Executor) error {
	if len(o) == 0 {
		return nil
	}

	o2, err := Foos.Query(sm.Where(o.pkIN())).All(ctx, exec)
	if err != nil {
		return err
	}

	o.copyMatchingRows(o2...)

	return nil
}
